(()=>{var e,t,s,r,n={384:(e,t,s)=>{var r={"./binaryCube.glb":[161,9,161],"./cube.obj":[387,9,387],"./sampleGLTF.bin":[96,7,96],"./sampleGLTF.gltf":[39,9,39],"./test.obj":[809,9,809],"./wall.jpg":[811,9]};function n(e){if(!s.o(r,e))return Promise.resolve().then((()=>{var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}));var t=r[e],n=t[0];return Promise.all(t.slice(2).map(s.e)).then((()=>s.t(n,16|t[1])))}n.keys=()=>Object.keys(r),n.id=384,e.exports=n},811:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>r});const r=s.p+"2ce6ec3185da49acbad2ebe2f2133042.jpg"},87:()=>{},263:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var s=i[e]={exports:{}};return n[e](s,s.exports,a),s.exports}a.m=n,t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(s,r){if(1&r&&(s=this(s)),8&r)return s;if("object"==typeof s&&s){if(4&r&&s.__esModule)return s;if(16&r&&"function"==typeof s.then)return s}var n=Object.create(null);a.r(n);var i={};e=e||[null,t({}),t([]),t(t)];for(var o=2&r&&s;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>i[e]=()=>s[e]));return i.default=()=>s,a.d(n,i),n},a.d=(e,t)=>{for(var s in t)a.o(t,s)&&!a.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,s)=>(a.f[s](e,t),t)),[])),a.u=e=>e+".App.js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s={},r="vertigo:",a.l=(e,t,n,i)=>{if(s[e])s[e].push(t);else{var o,u;if(void 0!==n)for(var c=document.getElementsByTagName("script"),h=0;h<c.length;h++){var l=c[h];if(l.getAttribute("src")==e||l.getAttribute("data-webpack")==r+n){o=l;break}}o||(u=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,a.nc&&o.setAttribute("nonce",a.nc),o.setAttribute("data-webpack",r+n),o.src=e),s[e]=[t];var f=(t,r)=>{o.onerror=o.onload=null,clearTimeout(g);var n=s[e];if(delete s[e],o.parentNode&&o.parentNode.removeChild(o),n&&n.forEach((e=>e(r))),t)return t(r)},g=setTimeout(f.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=f.bind(null,o.onerror),o.onload=f.bind(null,o.onload),u&&document.head.appendChild(o)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var s=t.getElementsByTagName("script");s.length&&(e=s[s.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={179:0};a.f.j=(t,s)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)s.push(r[2]);else{var n=new Promise(((s,n)=>r=e[t]=[s,n]));s.push(r[2]=n);var i=a.p+a.u(t),o=new Error;a.l(i,(s=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var n=s&&("load"===s.type?"missing":s.type),i=s&&s.target&&s.target.src;o.message="Loading chunk "+t+" failed.\n("+n+": "+i+")",o.name="ChunkLoadError",o.type=n,o.request=i,r[1](o)}}),"chunk-"+t,t)}};var t=(t,s)=>{var r,n,[i,o,u]=s,c=0;if(i.some((t=>0!==e[t]))){for(r in o)a.o(o,r)&&(a.m[r]=o[r]);u&&u(a)}for(t&&t(s);c<i.length;c++)n=i[c],a.o(e,n)&&e[n]&&e[n][0](),e[i[c]]=0},s=self.webpackChunkvertigo=self.webpackChunkvertigo||[];s.forEach(t.bind(null,0)),s.push=t.bind(null,s.push.bind(s))})(),(()=>{"use strict";var e;!function(e){e[e.NORMAL=0]="NORMAL",e[e.HIGH=1]="HIGH"}(e||(e={}));class t{identifier;payload;priority;sender;constructor(t,s,r,n=e.NORMAL){this.identifier=t,this.sender=s,this.payload=r,this.priority=n}}class s{_subscriberMap={};_normalMessageCapacity=10;_messageQueue=[];static _instance;constructor(){}static getInstance(){return null==s._instance&&(s._instance=new s),s._instance}addSubscription(e,t){let s=this._subscriberMap[e];void 0===s&&(this._subscriberMap[e]=[],s=[]),-1!==s.indexOf(t)?console.warn(t+" already exists in sub map with key "+e):this._subscriberMap[e].push(t)}removeSubscription(e,t){let s=this._subscriberMap[e];if(void 0===s)return void console.warn(t+" not subscribed to "+e);let r=s.indexOf(t);-1!==r&&this._subscriberMap[e].splice(r,1)}post(t){let s=this._subscriberMap[t.identifier];if(void 0!==s)for(let r of s)t.priority==e.HIGH?r.receiveMessage(t):this._messageQueue.push(t);else console.log("Message "+t.identifier+" not posted: No subscribers ")}update(){if(0===this._messageQueue.length)return;let e=Math.min(this._normalMessageCapacity,this._messageQueue.length);for(let t=0;t<e;t++){let e=this._messageQueue.pop();for(let t of this._subscriberMap[e.identifier])t.receiveMessage(e)}}}var r=a(811),n=1e-6,i="undefined"!=typeof Float32Array?Float32Array:Array;Math.random;var o=Math.PI/180;function u(e){return e*o}function c(){var e=new i(3);return i!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function h(e){var t=e[0],s=e[1],r=e[2];return Math.hypot(t,s,r)}function l(e,t,s){var r=new i(3);return r[0]=e,r[1]=t,r[2]=s,r}function f(e,t,s,r){return e[0]=t[0]+s[0]*r,e[1]=t[1]+s[1]*r,e[2]=t[2]+s[2]*r,e}function g(e,t,s){var r=t[0],n=t[1],i=t[2],a=s[0],o=s[1],u=s[2];return e[0]=n*u-i*o,e[1]=i*a-r*u,e[2]=r*o-n*a,e}function p(){var e=new i(16);return i!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function d(e,t,s){var r=t[0],n=t[1],i=t[2],a=t[3],o=t[4],u=t[5],c=t[6],h=t[7],l=t[8],f=t[9],g=t[10],p=t[11],d=t[12],m=t[13],E=t[14],T=t[15],y=s[0],b=s[1],R=s[2],x=s[3];return e[0]=y*r+b*o+R*l+x*d,e[1]=y*n+b*u+R*f+x*m,e[2]=y*i+b*c+R*g+x*E,e[3]=y*a+b*h+R*p+x*T,y=s[4],b=s[5],R=s[6],x=s[7],e[4]=y*r+b*o+R*l+x*d,e[5]=y*n+b*u+R*f+x*m,e[6]=y*i+b*c+R*g+x*E,e[7]=y*a+b*h+R*p+x*T,y=s[8],b=s[9],R=s[10],x=s[11],e[8]=y*r+b*o+R*l+x*d,e[9]=y*n+b*u+R*f+x*m,e[10]=y*i+b*c+R*g+x*E,e[11]=y*a+b*h+R*p+x*T,y=s[12],b=s[13],R=s[14],x=s[15],e[12]=y*r+b*o+R*l+x*d,e[13]=y*n+b*u+R*f+x*m,e[14]=y*i+b*c+R*g+x*E,e[15]=y*a+b*h+R*p+x*T,e}function m(e,t,s,r){var i,a,o,u,c,h,l,f,g,p,d,m,E,T,y,b,R,x,v,w,A,M,I,S,_=r[0],N=r[1],C=r[2],O=Math.hypot(_,N,C);return O<n?null:(_*=O=1/O,N*=O,C*=O,i=Math.sin(s),o=1-(a=Math.cos(s)),u=t[0],c=t[1],h=t[2],l=t[3],f=t[4],g=t[5],p=t[6],d=t[7],m=t[8],E=t[9],T=t[10],y=t[11],b=_*_*o+a,R=N*_*o+C*i,x=C*_*o-N*i,v=_*N*o-C*i,w=N*N*o+a,A=C*N*o+_*i,M=_*C*o+N*i,I=N*C*o-_*i,S=C*C*o+a,e[0]=u*b+f*R+m*x,e[1]=c*b+g*R+E*x,e[2]=h*b+p*R+T*x,e[3]=l*b+d*R+y*x,e[4]=u*v+f*w+m*A,e[5]=c*v+g*w+E*A,e[6]=h*v+p*w+T*A,e[7]=l*v+d*w+y*A,e[8]=u*M+f*I+m*S,e[9]=c*M+g*I+E*S,e[10]=h*M+p*I+T*S,e[11]=l*M+d*I+y*S,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)}),c();var E=function(e,t,s,r,n){var i,a=1/Math.tan(t/2);return e[0]=a/s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=a,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=n&&n!==1/0?(i=1/(r-n),e[10]=(n+r)*i,e[14]=2*n*r*i):(e[10]=-1,e[14]=-2*r),e};function T(e,t,s,r){var i,a,o,u,c,h,l,f,g,p,d=t[0],m=t[1],E=t[2],T=r[0],y=r[1],b=r[2],R=s[0],x=s[1],v=s[2];return Math.abs(d-R)<n&&Math.abs(m-x)<n&&Math.abs(E-v)<n?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(l=d-R,f=m-x,g=E-v,i=y*(g*=p=1/Math.hypot(l,f,g))-b*(f*=p),a=b*(l*=p)-T*g,o=T*f-y*l,(p=Math.hypot(i,a,o))?(i*=p=1/p,a*=p,o*=p):(i=0,a=0,o=0),u=f*o-g*a,c=g*i-l*o,h=l*a-f*i,(p=Math.hypot(u,c,h))?(u*=p=1/p,c*=p,h*=p):(u=0,c=0,h=0),e[0]=i,e[1]=u,e[2]=l,e[3]=0,e[4]=a,e[5]=c,e[6]=f,e[7]=0,e[8]=o,e[9]=h,e[10]=g,e[11]=0,e[12]=-(i*d+a*m+o*E),e[13]=-(u*d+c*m+h*E),e[14]=-(l*d+f*m+g*E),e[15]=1,e)}const y="INPUT_KEY_DOWN",b="INPUT_KEY_UP",R="INPUT_MOUSE_DOWN",x="INPUT_MOUSE_UP",v="INPUT_MOUSE_MOVE";class w{constructor(){this._listeners={}}addEventListener(e,t){const s=this._listeners;return void 0===s[e]&&(s[e]=[]),-1===s[e].indexOf(t)&&s[e].push(t),this}removeEventListener(e,t){if(void 0===this._listeners)return this;const s=this._listeners[e];if(void 0!==s){const e=s.indexOf(t);-1!==e&&s.splice(e,1)}return this}dispatchEvent(e){if(void 0===this._listeners)return this;const t=this._listeners[e.type];if(void 0!==t){const s=t.slice(0);for(let t=0,r=s.length;t<r;t++)s[t].call(this,e)}return this}dispose(){for(const e in this._listeners)delete this._listeners[e]}}class A extends w{constructor(e,t,s,r={}){if(super(),this._name=void 0,this._parent=void 0,this._child=void 0,this._attributes=void 0,this._disposed=!1,this._name=e,this._parent=t,this._child=s,this._attributes=r,!t.isOnGraph(s))throw new Error("Cannot connect disconnected graphs.")}getName(){return this._name}getParent(){return this._parent}getChild(){return this._child}setChild(e){return this._child=e,this}getAttributes(){return this._attributes}dispose(){this._disposed||(this._disposed=!0,this.dispatchEvent({type:"dispose",target:this}),super.dispose())}isDisposed(){return this._disposed}}class M extends w{constructor(...e){super(...e),this._emptySet=new Set,this._edges=new Set,this._parentEdges=new Map,this._childEdges=new Map}listEdges(){return Array.from(this._edges)}listParentEdges(e){return Array.from(this._childEdges.get(e)||this._emptySet)}listParents(e){return this.listParentEdges(e).map((e=>e.getParent()))}listChildEdges(e){return Array.from(this._parentEdges.get(e)||this._emptySet)}listChildren(e){return this.listChildEdges(e).map((e=>e.getChild()))}disconnectParents(e,t){let s=this.listParentEdges(e);return t&&(s=s.filter((e=>t(e.getParent())))),s.forEach((e=>e.dispose())),this}createEdge(e,t,s,r){return this._registerEdge(new A(e,t,s,r))}_registerEdge(e){this._edges.add(e);const t=e.getParent();this._parentEdges.has(t)||this._parentEdges.set(t,new Set),this._parentEdges.get(t).add(e);const s=e.getChild();return this._childEdges.has(s)||this._childEdges.set(s,new Set),this._childEdges.get(s).add(e),e.addEventListener("dispose",(()=>this._removeEdge(e))),e}_removeEdge(e){return this._edges.delete(e),this._parentEdges.get(e.getParent()).delete(e),this._childEdges.get(e.getChild()).delete(e),this}}function I(){return I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r])}return e},I.apply(this,arguments)}function S(e){return e instanceof A}function _(e){return Array.isArray(e)&&e[0]instanceof A}function N(e){return!!(e&&"object"==typeof e&&Object.values(e)[0]instanceof A)}const C=Symbol("attributes"),O=Symbol("immutableKeys");class F extends w{constructor(e){super(),this._disposed=!1,this.graph=void 0,this[C]=void 0,this[O]=void 0,this.graph=e,this[O]=new Set,this[C]=this._createAttributes()}getDefaults(){return{}}_createAttributes(){const e=this.getDefaults(),t={};for(const s in e){const r=e[s];if(r instanceof F){const e=this.graph.createEdge(s,this,r);e.addEventListener("dispose",(()=>r.dispose())),this[O].add(s),t[s]=e}else t[s]=r}return t}isOnGraph(e){return this.graph===e.graph}isDisposed(){return this._disposed}dispose(){this._disposed||(this.graph.listChildEdges(this).forEach((e=>e.dispose())),this.graph.disconnectParents(this),this._disposed=!0,this.dispatchEvent({type:"dispose"}))}detach(){return this.graph.disconnectParents(this),this}swap(e,t){for(const s in this[C]){const r=this[C][s];if(S(r)){const n=r;n.getChild()===e&&this.setRef(s,t,n.getAttributes())}else if(_(r)){const n=r.find((t=>t.getChild()===e));if(n){const r=n.getAttributes();this.removeRef(s,e).addRef(s,t,r)}}else if(N(r)){const n=r;for(const r in n){const i=n[r];i.getChild()===e&&this.setRefMap(s,r,t,i.getAttributes())}}}return this}get(e){return this[C][e]}set(e,t){return this[C][e]=t,this.dispatchEvent({type:"change",attribute:e})}getRef(e){const t=this[C][e];return t?t.getChild():null}setRef(e,t,s){if(this[O].has(e))throw new Error(`Cannot overwrite immutable attribute, "${e}".`);const r=this[C][e];if(r&&r.dispose(),!t)return this;const n=this.graph.createEdge(e,this,t,s);return n.addEventListener("dispose",(()=>{delete this[C][e],this.dispatchEvent({type:"change",attribute:e})})),this[C][e]=n,this.dispatchEvent({type:"change",attribute:e})}listRefs(e){return this[C][e].map((e=>e.getChild()))}addRef(e,t,s){const r=this.graph.createEdge(e,this,t,s),n=this[C][e];return n.push(r),r.addEventListener("dispose",(()=>{const t=n.filter((e=>e!==r));n.length=0;for(const e of t)n.push(e);this.dispatchEvent({type:"change",attribute:e})})),this.dispatchEvent({type:"change",attribute:e})}removeRef(e,t){return this[C][e].filter((e=>e.getChild()===t)).forEach((e=>e.dispose())),this}listRefMapKeys(e){return Object.keys(this[C][e])}listRefMapValues(e){return Object.values(this[C][e]).map((e=>e.getChild()))}getRefMap(e,t){const s=this[C][e];return s[t]?s[t].getChild():null}setRefMap(e,t,s,r){const n=this[C][e],i=n[t];if(i&&i.dispose(),!s)return this;r=Object.assign(r||{},{key:t});const a=this.graph.createEdge(e,this,s,I({},r,{key:t}));return a.addEventListener("dispose",(()=>{delete n[t],this.dispatchEvent({type:"change",attribute:e,key:t})})),n[t]=a,this.dispatchEvent({type:"change",attribute:e,key:t})}dispatchEvent(e){return super.dispatchEvent(I({},e,{target:this})),this.graph.dispatchEvent(I({},e,{target:this,type:`node:${e.type}`})),this}}var U,B,D,L,P;!function(e){e.ACCESSOR="Accessor",e.ANIMATION="Animation",e.ANIMATION_CHANNEL="AnimationChannel",e.ANIMATION_SAMPLER="AnimationSampler",e.BUFFER="Buffer",e.CAMERA="Camera",e.MATERIAL="Material",e.MESH="Mesh",e.PRIMITIVE="Primitive",e.PRIMITIVE_TARGET="PrimitiveTarget",e.NODE="Node",e.ROOT="Root",e.SCENE="Scene",e.SKIN="Skin",e.TEXTURE="Texture",e.TEXTURE_INFO="TextureInfo"}(U||(U={})),function(e){e.INTERLEAVED="interleaved",e.SEPARATE="separate"}(B||(B={})),function(e){e.ARRAY_BUFFER="ARRAY_BUFFER",e.ELEMENT_ARRAY_BUFFER="ELEMENT_ARRAY_BUFFER",e.INVERSE_BIND_MATRICES="INVERSE_BIND_MATRICES",e.OTHER="OTHER"}(D||(D={})),function(e){e[e.R=4096]="R",e[e.G=256]="G",e[e.B=16]="B",e[e.A=1]="A"}(L||(L={})),function(e){e.GLTF="GLTF",e.GLB="GLB"}(P||(P={}));class j{static createBufferFromDataURI(e){if("undefined"==typeof Buffer){const t=atob(e.split(",")[1]),s=new Uint8Array(t.length);for(let e=0;e<t.length;e++)s[e]=t.charCodeAt(e);return s}{const t=e.split(",")[1],s=e.indexOf("base64")>=0;return Buffer.from(t,s?"base64":"utf8")}}static encodeText(e){return"undefined"!=typeof TextEncoder?(new TextEncoder).encode(e):Buffer.from(e)}static decodeText(e){return"undefined"!=typeof TextDecoder?(new TextDecoder).decode(e):Buffer.from(e).toString("utf8")}static concat(e){let t=0;for(const s of e)t+=s.byteLength;const s=new Uint8Array(t);let r=0;for(const t of e)s.set(t,r),r+=t.byteLength;return s}static pad(e,t=0){const s=this.padNumber(e.byteLength);if(s===e.byteLength)return e;const r=new Uint8Array(s);if(r.set(e),0!==t)for(let n=e.byteLength;n<s;n++)r[n]=t;return r}static padNumber(e){return 4*Math.ceil(e/4)}static equals(e,t){if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;let s=e.byteLength;for(;s--;)if(e[s]!==t[s])return!1;return!0}static toView(e,t=0,s=1/0){return new Uint8Array(e.buffer,e.byteOffset+t,Math.min(e.byteLength,s))}static assertView(e){if(e&&!ArrayBuffer.isView(e))throw new Error(`Method requires Uint8Array parameter; received "${typeof e}".`);return e}}class V{static hexToFactor(e,t){e=Math.floor(e);const s=t;return s[0]=(e>>16&255)/255,s[1]=(e>>8&255)/255,s[2]=(255&e)/255,this.convertSRGBToLinear(t,t)}static factorToHex(e){const t=[...e],[s,r,n]=this.convertLinearToSRGB(e,t);return 255*s<<16^255*r<<8^255*n<<0}static convertSRGBToLinear(e,t){const s=e,r=t;for(let e=0;e<3;e++)r[e]=s[e]<.04045?.0773993808*s[e]:Math.pow(.9478672986*s[e]+.0521327014,2.4);return t}static convertLinearToSRGB(e,t){const s=e,r=t;for(let e=0;e<3;e++)r[e]=s[e]<.0031308?12.92*s[e]:1.055*Math.pow(s[e],.41666)-.055;return t}}class k{static basename(e){const t=(e=new URL(e,"https://null.example").pathname).split(/[\\/]/).pop();return t.substring(0,t.lastIndexOf("."))}static extension(e){return 0!==e.indexOf("data:")?(e=new URL(e,"https://null.example").pathname).split(/[\\/]/).pop().split(/[.]/).pop():0===e.indexOf("data:image/png")?"png":0===e.indexOf("data:image/jpeg")?"jpeg":"bin"}}class G{match(e){return e.length>=8&&137===e[0]&&80===e[1]&&78===e[2]&&71===e[3]&&13===e[4]&&10===e[5]&&26===e[6]&&10===e[7]}getSize(e){const t=new DataView(e.buffer,e.byteOffset);return j.decodeText(e.slice(12,16))===G.PNG_FRIED_CHUNK_NAME?[t.getUint32(32,!1),t.getUint32(36,!1)]:[t.getUint32(16,!1),t.getUint32(20,!1)]}getChannels(e){return 4}}G.PNG_FRIED_CHUNK_NAME="CgBI";class z{static registerFormat(e,t){this.impls[e]=t}static getMimeType(e){for(const t in this.impls)if(this.impls[t].match(e))return t;return null}static getSize(e,t){return this.impls[t]?this.impls[t].getSize(e):null}static getChannels(e,t){return this.impls[t]?this.impls[t].getChannels(e):null}static getMemSize(e,t){if(!this.impls[t])return null;if(this.impls[t].getGPUByteLength)return this.impls[t].getGPUByteLength(e);let s=0;const r=this.getSize(e,t);if(!r)return null;for(;r[0]>1||r[1]>1;)s+=r[0]*r[1]*4,r[0]=Math.max(Math.floor(r[0]/2),1),r[1]=Math.max(Math.floor(r[1]/2),1);return s+=4,s}static mimeTypeToExtension(e){return"image/jpeg"===e?"jpg":e.split("/").pop()}static extensionToMimeType(e){return"jpg"===e?"image/jpeg":`image/${e}`}}function Y(e,t){if(t>e.byteLength)throw new TypeError("Corrupt JPG, exceeded buffer limits");if(255!==e.getUint8(t))throw new TypeError("Invalid JPG, marker table corrupted");return e}function H(e){return"[object Object]"===Object.prototype.toString.call(e)}function W(e){if(!1===H(e))return!1;const t=e.constructor;if(void 0===t)return!0;const s=t.prototype;return!1!==H(s)&&!1!==Object.prototype.hasOwnProperty.call(s,"isPrototypeOf")}z.impls={"image/jpeg":new class{match(e){return e.length>=3&&255===e[0]&&216===e[1]&&255===e[2]}getSize(e){let t,s,r=new DataView(e.buffer,e.byteOffset+4);for(;r.byteLength;){if(t=r.getUint16(0,!1),Y(r,t),s=r.getUint8(t+1),192===s||193===s||194===s)return[r.getUint16(t+7,!1),r.getUint16(t+5,!1)];r=new DataView(e.buffer,r.byteOffset+t+2)}throw new TypeError("Invalid JPG, no size found")}getChannels(e){return 3}},"image/png":new G};class q{constructor(e){this.verbosity=void 0,this.verbosity=e}debug(e){this.verbosity<=q.Verbosity.DEBUG&&console.debug(e)}info(e){this.verbosity<=q.Verbosity.INFO&&console.info(e)}warn(e){this.verbosity<=q.Verbosity.WARN&&console.warn(e)}error(e){this.verbosity<=q.Verbosity.ERROR&&console.error(e)}}q.Verbosity={SILENT:4,ERROR:3,WARN:2,INFO:1,DEBUG:0},q.DEFAULT_INSTANCE=new q(q.Verbosity.INFO);class X{static identity(e){return e}static eq(e,t){if(e.length!==t.length)return!1;for(let s=0;s<e.length;s++)if(Math.abs(e[s]-t[s])>1e-5)return!1;return!0}static denormalize(e,t){switch(t){case 5126:return e;case 5123:return e/65535;case 5121:return e/255;case 5122:return Math.max(e/32767,-1);case 5120:return Math.max(e/127,-1);default:throw new Error("Invalid component type.")}}static normalize(e,t){switch(t){case 5126:return e;case 5123:return Math.round(65535*e);case 5121:return Math.round(255*e);case 5122:return Math.round(32767*e);case 5120:return Math.round(127*e);default:throw new Error("Invalid component type.")}}static decompose(e,t,s,r){let n=h([e[0],e[1],e[2]]);const a=h([e[4],e[5],e[6]]),o=h([e[8],e[9],e[10]]);(function(e){var t=e[0],s=e[1],r=e[2],n=e[3],i=e[4],a=e[5],o=e[6],u=e[7],c=e[8],h=e[9],l=e[10],f=e[11],g=e[12],p=e[13],d=e[14],m=e[15];return(t*a-s*i)*(l*m-f*d)-(t*o-r*i)*(h*m-f*p)+(t*u-n*i)*(h*d-l*p)+(s*o-r*a)*(c*m-f*g)-(s*u-n*a)*(c*d-l*g)+(r*u-n*o)*(c*p-h*g)})(e)<0&&(n=-n),t[0]=e[12],t[1]=e[13],t[2]=e[14];const u=e.slice(),c=1/n,l=1/a,f=1/o;u[0]*=c,u[1]*=c,u[2]*=c,u[4]*=l,u[5]*=l,u[6]*=l,u[8]*=f,u[9]*=f,u[10]*=f,function(e,t){var s=new i(3);!function(e,t){var s=t[0],r=t[1],n=t[2],i=t[4],a=t[5],o=t[6],u=t[8],c=t[9],h=t[10];e[0]=Math.hypot(s,r,n),e[1]=Math.hypot(i,a,o),e[2]=Math.hypot(u,c,h)}(s,t);var r=1/s[0],n=1/s[1],a=1/s[2],o=t[0]*r,u=t[1]*n,c=t[2]*a,h=t[4]*r,l=t[5]*n,f=t[6]*a,g=t[8]*r,p=t[9]*n,d=t[10]*a,m=o+l+d,E=0;m>0?(E=2*Math.sqrt(m+1),e[3]=.25*E,e[0]=(f-p)/E,e[1]=(g-c)/E,e[2]=(u-h)/E):o>l&&o>d?(E=2*Math.sqrt(1+o-l-d),e[3]=(f-p)/E,e[0]=.25*E,e[1]=(u+h)/E,e[2]=(g+c)/E):l>d?(E=2*Math.sqrt(1+l-o-d),e[3]=(g-c)/E,e[0]=(u+h)/E,e[1]=.25*E,e[2]=(f+p)/E):(E=2*Math.sqrt(1+d-o-l),e[3]=(u-h)/E,e[0]=(g+c)/E,e[1]=(f+p)/E,e[2]=.25*E)}(s,u),r[0]=n,r[1]=a,r[2]=o}static compose(e,t,s,r){const n=r,i=t[0],a=t[1],o=t[2],u=t[3],c=i+i,h=a+a,l=o+o,f=i*c,g=i*h,p=i*l,d=a*h,m=a*l,E=o*l,T=u*c,y=u*h,b=u*l,R=s[0],x=s[1],v=s[2];return n[0]=(1-(d+E))*R,n[1]=(g+b)*R,n[2]=(p-y)*R,n[3]=0,n[4]=(g-b)*x,n[5]=(1-(f+E))*x,n[6]=(m+T)*x,n[7]=0,n[8]=(p+y)*v,n[9]=(m-T)*v,n[10]=(1-(f+d))*v,n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n}}function J(e,t){if(!!e!=!!t)return!1;const s=e.getChild(),r=t.getChild();return s===r||s.equals(r)}function $(e,t){if(!!e!=!!t)return!1;if(e.length!==t.length)return!1;for(let s=0;s<e.length;s++){const r=e[s],n=t[s];if(r.getChild()!==n.getChild()&&!r.getChild().equals(n.getChild()))return!1}return!0}function K(e,t){if(!!e!=!!t)return!1;const s=Object.keys(e),r=Object.keys(t);if(s.length!==r.length)return!1;for(const s in e){const r=e[s],n=t[s];if(!!r!=!!n)return!1;const i=r.getChild(),a=n.getChild();if(i!==a&&!i.equals(a))return!1}return!0}function Z(e,t){if(e===t)return!0;if(!!e!=!!t||!e||!t)return!1;if(e.length!==t.length)return!1;for(let s=0;s<e.length;s++)if(e[s]!==t[s])return!1;return!0}function Q(e,t){if(e===t)return!0;if(!!e!=!!t)return!1;if(!W(e)||!W(t))return e===t;const s=e,r=t;let n,i=0,a=0;for(n in s)i++;for(n in r)a++;if(i!==a)return!1;for(n in s){const e=s[n],t=r[n];if(ee(e)&&ee(t)){if(!Z(e,t))return!1}else if(W(e)&&W(t)){if(!Q(e,t))return!1}else if(e!==t)return!1}return!0}function ee(e){return Array.isArray(e)||ArrayBuffer.isView(e)}const te="23456789abdegjkmnpqrvwxyzABDEGJKMNPQRVWXYZ",se=new Set,re=function(){let e="";for(let t=0;t<6;t++)e+=te.charAt(Math.floor(Math.random()*te.length));return e};class ne{static dirname(e){const t=e.lastIndexOf("/");return-1===t?"./":e.substring(0,t+1)}static resolve(e,t){if(!this.isRelativePath(t))return t;const s=e.split("/"),r=t.split("/");s.pop();for(let e=0;e<r.length;e++)"."!==r[e]&&(".."===r[e]?s.pop():s.push(r[e]));return s.join("/")}static isAbsoluteURL(e){return this.PROTOCOL_REGEXP.test(e)}static isRelativePath(e){return!/^(?:[a-zA-Z]+:)?\//.test(e)}}ne.DEFAULT_INIT={},ne.PROTOCOL_REGEXP=/^[a-zA-Z]+:\/\//;const ie=e=>e;class ae extends F{constructor(e,t=""){super(e),this[C].name=t,this.init(),this.dispatchEvent({type:"create"})}getDefaults(){return Object.assign(super.getDefaults(),{name:"",extras:{}})}getName(){return this.get("name")}setName(e){return this.set("name",e)}getExtras(){return this.get("extras")}setExtras(e){return this.set("extras",e)}clone(){return new(0,this.constructor)(this.graph).copy(this,ie)}copy(e,t=ie){for(const e in this[C]){const t=this[C][e];if(t instanceof A)this[O].has(e)||t.dispose();else if(Array.isArray(t)&&t[0]instanceof A)for(const e of t)e.dispose();else if(W(t)&&Object.values(t)[0]instanceof A)for(const e in t)t[e].dispose()}for(const s in e[C]){const r=this[C][s],n=e[C][s];if(n instanceof A)this[O].has(s)?r.getChild().copy(t(n.getChild()),t):this.setRef(s,t(n.getChild()),n.getAttributes());else if(Array.isArray(n)&&n[0]instanceof A)for(const e of n)this.addRef(s,t(e.getChild()),e.getAttributes());else if(W(n)&&Object.values(n)[0]instanceof A)for(const e in n){const r=n[e];this.setRefMap(s,e,t(r.getChild()),r.getAttributes())}else this[C][s]=W(n)?JSON.parse(JSON.stringify(n)):Array.isArray(n)||n instanceof ArrayBuffer||ArrayBuffer.isView(n)?n.slice():n}return this}equals(e){if(this===e)return!0;if(this.propertyType!==e.propertyType)return!1;for(const t in this[C]){const s=this[C][t],r=e[C][t];if(S(s)||S(r)){if(!J(s,r))return!1}else if(_(s)||_(r)){if(!$(s,r))return!1}else if(N(s)||N(r)){if(!K(s,r))return!1}else if(W(s)||W(r)){if(!Q(s,r))return!1}else if(ee(s)||ee(r)){if(!Z(s,r))return!1}else if(s!==r)return!1}return!0}detach(){return this.graph.disconnectParents(this,(e=>"Root"!==e.propertyType)),this}listParents(){return this.graph.listParents(this)}}class oe extends ae{getDefaults(){return Object.assign(super.getDefaults(),{extensions:{}})}getExtension(e){return this.getRefMap("extensions",e)}setExtension(e,t){return t&&t.t(this),this.setRefMap("extensions",e,t)}listExtensions(){return this.listRefMapValues("extensions")}}class ue extends oe{constructor(...e){super(...e),this.i=X.identity,this.o=X.identity}init(){this.propertyType=U.ACCESSOR}getDefaults(){return Object.assign(super.getDefaults(),{array:null,type:ue.Type.SCALAR,componentType:ue.ComponentType.FLOAT,normalized:!1,buffer:null})}copy(e,t=ie){return super.copy(e,t),this.i=e.i,this.o=e.o,this}static getElementSize(e){switch(e){case ue.Type.SCALAR:return 1;case ue.Type.VEC2:return 2;case ue.Type.VEC3:return 3;case ue.Type.VEC4:case ue.Type.MAT2:return 4;case ue.Type.MAT3:return 9;case ue.Type.MAT4:return 16;default:throw new Error("Unexpected type: "+e)}}static getComponentSize(e){switch(e){case ue.ComponentType.BYTE:case ue.ComponentType.UNSIGNED_BYTE:return 1;case ue.ComponentType.SHORT:case ue.ComponentType.UNSIGNED_SHORT:return 2;case ue.ComponentType.UNSIGNED_INT:case ue.ComponentType.FLOAT:return 4;default:throw new Error("Unexpected component type: "+e)}}getMinNormalized(e){const t=this.getElementSize();this.getMin(e);for(let s=0;s<t;s++)e[s]=this.o(e[s]);return e}getMin(e){const t=this.get("array"),s=this.getCount(),r=this.getElementSize();for(let t=0;t<r;t++)e[t]=1/0;for(let n=0;n<s*r;n+=r)for(let s=0;s<r;s++){const r=t[n+s];Number.isFinite(r)&&(e[s]=Math.min(e[s],r))}return e}getMaxNormalized(e){const t=this.getElementSize();this.getMax(e);for(let s=0;s<t;s++)e[s]=this.o(e[s]);return e}getMax(e){const t=this.get("array"),s=this.getCount(),r=this.getElementSize();for(let t=0;t<r;t++)e[t]=-1/0;for(let n=0;n<s*r;n+=r)for(let s=0;s<r;s++){const r=t[n+s];Number.isFinite(r)&&(e[s]=Math.max(e[s],r))}return e}getCount(){const e=this.get("array");return e?e.length/this.getElementSize():0}getType(){return this.get("type")}setType(e){return this.set("type",e)}getElementSize(){return ue.getElementSize(this.get("type"))}getComponentSize(){return this.get("array").BYTES_PER_ELEMENT}getComponentType(){return this.get("componentType")}getNormalized(){return this.get("normalized")}setNormalized(e){return this.set("normalized",e),e?(this.o=e=>X.denormalize(e,this.get("componentType")),this.i=e=>X.normalize(e,this.get("componentType"))):(this.o=X.identity,this.i=X.identity),this}getScalar(e){const t=this.getElementSize();return this.o(this.get("array")[e*t])}setScalar(e,t){return this.get("array")[e*this.getElementSize()]=this.i(t),this}getElement(e,t){const s=this.getElementSize(),r=this.get("array");for(let n=0;n<s;n++)t[n]=this.o(r[e*s+n]);return t}setElement(e,t){const s=this.getElementSize(),r=this.get("array");for(let n=0;n<s;n++)r[e*s+n]=this.i(t[n]);return this}getBuffer(){return this.getRef("buffer")}setBuffer(e){return this.setRef("buffer",e)}getArray(){return this.get("array")}setArray(e){return this.set("componentType",e?function(e){switch(e.constructor){case Float32Array:return ue.ComponentType.FLOAT;case Uint32Array:return ue.ComponentType.UNSIGNED_INT;case Uint16Array:return ue.ComponentType.UNSIGNED_SHORT;case Uint8Array:return ue.ComponentType.UNSIGNED_BYTE;case Int16Array:return ue.ComponentType.SHORT;case Int8Array:return ue.ComponentType.BYTE;default:throw new Error("Unknown accessor componentType.")}}(e):ue.ComponentType.FLOAT),this.set("array",e),this}getByteLength(){const e=this.get("array");return e?e.byteLength:0}}ue.Type={SCALAR:"SCALAR",VEC2:"VEC2",VEC3:"VEC3",VEC4:"VEC4",MAT2:"MAT2",MAT3:"MAT3",MAT4:"MAT4"},ue.ComponentType={BYTE:5120,UNSIGNED_BYTE:5121,SHORT:5122,UNSIGNED_SHORT:5123,UNSIGNED_INT:5125,FLOAT:5126};class ce extends oe{init(){this.propertyType=U.ANIMATION}getDefaults(){return Object.assign(super.getDefaults(),{channels:[],samplers:[]})}addChannel(e){return this.addRef("channels",e)}removeChannel(e){return this.removeRef("channels",e)}listChannels(){return this.listRefs("channels")}addSampler(e){return this.addRef("samplers",e)}removeSampler(e){return this.removeRef("samplers",e)}listSamplers(){return this.listRefs("samplers")}}class he extends oe{init(){this.propertyType=U.ANIMATION_CHANNEL}getDefaults(){return Object.assign(super.getDefaults(),{targetPath:null,targetNode:null,sampler:null})}getTargetPath(){return this.get("targetPath")}setTargetPath(e){return this.set("targetPath",e)}getTargetNode(){return this.getRef("targetNode")}setTargetNode(e){return this.setRef("targetNode",e)}getSampler(){return this.getRef("sampler")}setSampler(e){return this.setRef("sampler",e)}}he.TargetPath={TRANSLATION:"translation",ROTATION:"rotation",SCALE:"scale",WEIGHTS:"weights"};class le extends oe{init(){this.propertyType=U.ANIMATION_SAMPLER}getDefaultAttributes(){return Object.assign(super.getDefaults(),{interpolation:le.Interpolation.LINEAR,input:null,output:null})}getInterpolation(){return this.get("interpolation")}setInterpolation(e){return this.set("interpolation",e)}getInput(){return this.getRef("input")}setInput(e){return this.setRef("input",e,{usage:D.OTHER})}getOutput(){return this.getRef("output")}setOutput(e){return this.setRef("output",e,{usage:D.OTHER})}}le.Interpolation={LINEAR:"LINEAR",STEP:"STEP",CUBICSPLINE:"CUBICSPLINE"};class fe extends oe{init(){this.propertyType=U.BUFFER}getDefaults(){return Object.assign(super.getDefaults(),{uri:""})}getURI(){return this.get("uri")}setURI(e){return this.set("uri",e)}}class ge extends oe{init(){this.propertyType=U.CAMERA}getDefaults(){return Object.assign(super.getDefaults(),{type:ge.Type.PERSPECTIVE,znear:.1,zfar:100,aspectRatio:null,yfov:2*Math.PI*50/360,xmag:1,ymag:1})}getType(){return this.get("type")}setType(e){return this.set("type",e)}getZNear(){return this.get("znear")}setZNear(e){return this.set("znear",e)}getZFar(){return this.get("zfar")}setZFar(e){return this.set("zfar",e)}getAspectRatio(){return this.get("aspectRatio")}setAspectRatio(e){return this.set("aspectRatio",e)}getYFov(){return this.get("yfov")}setYFov(e){return this.set("yfov",e)}getXMag(){return this.get("xmag")}setXMag(e){return this.set("xmag",e)}getYMag(){return this.get("ymag")}setYMag(e){return this.set("ymag",e)}}ge.Type={PERSPECTIVE:"perspective",ORTHOGRAPHIC:"orthographic"};(class extends ae{t(e){if(!this.parentTypes.includes(e.propertyType))throw new Error(`Parent "${e.propertyType}" invalid for child "${this.propertyType}".`)}}).EXTENSION_NAME=void 0;class pe extends oe{init(){this.propertyType=U.TEXTURE_INFO}getDefaults(){return Object.assign(super.getDefaults(),{texCoord:0,magFilter:null,minFilter:null,wrapS:pe.WrapMode.REPEAT,wrapT:pe.WrapMode.REPEAT})}getTexCoord(){return this.get("texCoord")}setTexCoord(e){return this.set("texCoord",e)}getMagFilter(){return this.get("magFilter")}setMagFilter(e){return this.set("magFilter",e)}getMinFilter(){return this.get("minFilter")}setMinFilter(e){return this.set("minFilter",e)}getWrapS(){return this.get("wrapS")}setWrapS(e){return this.set("wrapS",e)}getWrapT(){return this.get("wrapT")}setWrapT(e){return this.set("wrapT",e)}}pe.WrapMode={CLAMP_TO_EDGE:33071,MIRRORED_REPEAT:33648,REPEAT:10497},pe.MagFilter={NEAREST:9728,LINEAR:9729},pe.MinFilter={NEAREST:9728,LINEAR:9729,NEAREST_MIPMAP_NEAREST:9984,LINEAR_MIPMAP_NEAREST:9985,NEAREST_MIPMAP_LINEAR:9986,LINEAR_MIPMAP_LINEAR:9987};const{R:de,G:me,B:Ee,A:Te}=L;class ye extends oe{init(){this.propertyType=U.MATERIAL}getDefaults(){return Object.assign(super.getDefaults(),{alphaMode:ye.AlphaMode.OPAQUE,alphaCutoff:.5,doubleSided:!1,baseColorFactor:[1,1,1,1],baseColorTexture:null,baseColorTextureInfo:new pe(this.graph,"baseColorTextureInfo"),emissiveFactor:[0,0,0],emissiveTexture:null,emissiveTextureInfo:new pe(this.graph,"emissiveTextureInfo"),normalScale:1,normalTexture:null,normalTextureInfo:new pe(this.graph,"normalTextureInfo"),occlusionStrength:1,occlusionTexture:null,occlusionTextureInfo:new pe(this.graph,"occlusionTextureInfo"),roughnessFactor:1,metallicFactor:1,metallicRoughnessTexture:null,metallicRoughnessTextureInfo:new pe(this.graph,"metallicRoughnessTextureInfo")})}getDoubleSided(){return this.get("doubleSided")}setDoubleSided(e){return this.set("doubleSided",e)}getAlpha(){return this.get("baseColorFactor")[3]}setAlpha(e){const t=this.get("baseColorFactor").slice();return t[3]=e,this.set("baseColorFactor",t)}getAlphaMode(){return this.get("alphaMode")}setAlphaMode(e){return this.set("alphaMode",e)}getAlphaCutoff(){return this.get("alphaCutoff")}setAlphaCutoff(e){return this.set("alphaCutoff",e)}getBaseColorFactor(){return this.get("baseColorFactor")}setBaseColorFactor(e){return this.set("baseColorFactor",e)}getBaseColorHex(){return V.factorToHex(this.get("baseColorFactor"))}setBaseColorHex(e){const t=this.get("baseColorFactor").slice();return this.set("baseColorFactor",V.hexToFactor(e,t))}getBaseColorTexture(){return this.getRef("baseColorTexture")}getBaseColorTextureInfo(){return this.getRef("baseColorTexture")?this.getRef("baseColorTextureInfo"):null}setBaseColorTexture(e){return this.setRef("baseColorTexture",e,{channels:de|me|Ee|Te})}getEmissiveFactor(){return this.get("emissiveFactor")}setEmissiveFactor(e){return this.set("emissiveFactor",e)}getEmissiveHex(){return V.factorToHex(this.get("emissiveFactor"))}setEmissiveHex(e){const t=this.get("emissiveFactor").slice();return this.set("emissiveFactor",V.hexToFactor(e,t))}getEmissiveTexture(){return this.getRef("emissiveTexture")}getEmissiveTextureInfo(){return this.getRef("emissiveTexture")?this.getRef("emissiveTextureInfo"):null}setEmissiveTexture(e){return this.setRef("emissiveTexture",e,{channels:de|me|Ee})}getNormalScale(){return this.get("normalScale")}setNormalScale(e){return this.set("normalScale",e)}getNormalTexture(){return this.getRef("normalTexture")}getNormalTextureInfo(){return this.getRef("normalTexture")?this.getRef("normalTextureInfo"):null}setNormalTexture(e){return this.setRef("normalTexture",e,{channels:de|me|Ee})}getOcclusionStrength(){return this.get("occlusionStrength")}setOcclusionStrength(e){return this.set("occlusionStrength",e)}getOcclusionTexture(){return this.getRef("occlusionTexture")}getOcclusionTextureInfo(){return this.getRef("occlusionTexture")?this.getRef("occlusionTextureInfo"):null}setOcclusionTexture(e){return this.setRef("occlusionTexture",e,{channels:de})}getRoughnessFactor(){return this.get("roughnessFactor")}setRoughnessFactor(e){return this.set("roughnessFactor",e)}getMetallicFactor(){return this.get("metallicFactor")}setMetallicFactor(e){return this.set("metallicFactor",e)}getMetallicRoughnessTexture(){return this.getRef("metallicRoughnessTexture")}getMetallicRoughnessTextureInfo(){return this.getRef("metallicRoughnessTexture")?this.getRef("metallicRoughnessTextureInfo"):null}setMetallicRoughnessTexture(e){return this.setRef("metallicRoughnessTexture",e,{channels:me|Ee})}}ye.AlphaMode={OPAQUE:"OPAQUE",MASK:"MASK",BLEND:"BLEND"};class be extends oe{init(){this.propertyType=U.MESH}getDefaults(){return Object.assign(super.getDefaults(),{weights:[],primitives:[]})}addPrimitive(e){return this.addRef("primitives",e)}removePrimitive(e){return this.removeRef("primitives",e)}listPrimitives(){return this.listRefs("primitives")}getWeights(){return this.get("weights")}setWeights(e){return this.set("weights",e)}}class Re extends oe{constructor(...e){super(...e),this.u=null}init(){this.propertyType=U.NODE}getDefaults(){return Object.assign(super.getDefaults(),{translation:[0,0,0],rotation:[0,0,0,1],scale:[1,1,1],weights:[],camera:null,mesh:null,skin:null,children:[]})}copy(e,t=ie){if(t===ie)throw new Error("Node cannot be copied.");return super.copy(e,t)}getTranslation(){return this.get("translation")}getRotation(){return this.get("rotation")}getScale(){return this.get("scale")}setTranslation(e){return this.set("translation",e)}setRotation(e){return this.set("rotation",e)}setScale(e){return this.set("scale",e)}getMatrix(){return X.compose(this.get("translation"),this.get("rotation"),this.get("scale"),[])}setMatrix(e){const t=this.get("translation").slice(),s=this.get("rotation").slice(),r=this.get("scale").slice();return X.decompose(e,t,s,r),this.set("translation",t).set("rotation",s).set("scale",r)}getWorldTranslation(){const e=[0,0,0];return X.decompose(this.getWorldMatrix(),e,[0,0,0,1],[1,1,1]),e}getWorldRotation(){const e=[0,0,0,1];return X.decompose(this.getWorldMatrix(),[0,0,0],e,[1,1,1]),e}getWorldScale(){const e=[1,1,1];return X.decompose(this.getWorldMatrix(),[0,0,0],[0,0,0,1],e),e}getWorldMatrix(){const e=[];for(let t=this;t instanceof Re;t=t.u)e.push(t);let t;const s=e.pop().getMatrix();for(;t=e.pop();)d(s,s,t.getMatrix());return s}addChild(e){e.u&&e.u.removeChild(e),this.addRef("children",e),e.u=this;const t=this[C].children;return t[t.length-1].addEventListener("dispose",(()=>e.u=null)),this}removeChild(e){return this.removeRef("children",e)}listChildren(){return this.listRefs("children")}getParent(){return this.u}getMesh(){return this.getRef("mesh")}setMesh(e){return this.setRef("mesh",e)}getCamera(){return this.getRef("camera")}setCamera(e){return this.setRef("camera",e)}getSkin(){return this.getRef("skin")}setSkin(e){return this.setRef("skin",e)}getWeights(){return this.get("weights")}setWeights(e){return this.set("weights",e)}traverse(e){e(this);for(const t of this.listChildren())t.traverse(e);return this}}class xe extends oe{init(){this.propertyType=U.PRIMITIVE}getDefaults(){return Object.assign(super.getDefaults(),{mode:xe.Mode.TRIANGLES,material:null,indices:null,attributes:{},targets:[]})}getIndices(){return this.getRef("indices")}setIndices(e){return this.setRef("indices",e,{usage:D.ELEMENT_ARRAY_BUFFER})}getAttribute(e){return this.getRefMap("attributes",e)}setAttribute(e,t){return this.setRefMap("attributes",e,t,{usage:D.ARRAY_BUFFER})}listAttributes(){return this.listRefMapValues("attributes")}listSemantics(){return this.listRefMapKeys("attributes")}getMaterial(){return this.getRef("material")}setMaterial(e){return this.setRef("material",e)}getMode(){return this.get("mode")}setMode(e){return this.set("mode",e)}listTargets(){return this.listRefs("targets")}addTarget(e){return this.addRef("targets",e)}removeTarget(e){return this.removeRef("targets",e)}}xe.Mode={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6};class ve extends ae{init(){this.propertyType=U.PRIMITIVE_TARGET}getDefaults(){return Object.assign(super.getDefaults(),{attributes:{}})}getAttribute(e){return this.getRefMap("attributes",e)}setAttribute(e,t){return this.setRefMap("attributes",e,t,{usage:D.ARRAY_BUFFER})}listAttributes(){return this.listRefMapValues("attributes")}listSemantics(){return this.listRefMapKeys("attributes")}}function we(){return(we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(e[r]=s[r])}return e}).apply(this,arguments)}class Ae extends oe{init(){this.propertyType=U.SCENE}getDefaults(){return Object.assign(super.getDefaults(),{children:[]})}copy(e,t=ie){if(t===ie)throw new Error("Scene cannot be copied.");return super.copy(e,t)}addChild(e){e.u&&e.u.removeChild(e),this.addRef("children",e),e.u=this;const t=this[C].children;return t[t.length-1].addEventListener("dispose",(()=>e.u=null)),this}removeChild(e){return this.removeRef("children",e)}listChildren(){return this.listRefs("children")}traverse(e){for(const t of this.listChildren())t.traverse(e);return this}}class Me extends oe{init(){this.propertyType=U.SKIN}getDefaults(){return Object.assign(super.getDefaults(),{skeleton:null,inverseBindMatrices:null,joints:[]})}getSkeleton(){return this.getRef("skeleton")}setSkeleton(e){return this.setRef("skeleton",e)}getInverseBindMatrices(){return this.getRef("inverseBindMatrices")}setInverseBindMatrices(e){return this.setRef("inverseBindMatrices",e,{usage:D.INVERSE_BIND_MATRICES})}addJoint(e){return this.addRef("joints",e)}removeJoint(e){return this.removeRef("joints",e)}listJoints(){return this.listRefs("joints")}}class Ie extends oe{init(){this.propertyType=U.TEXTURE}getDefaults(){return Object.assign(super.getDefaults(),{image:null,mimeType:"",uri:""})}getMimeType(){return this.get("mimeType")||z.extensionToMimeType(k.extension(this.get("uri")))}setMimeType(e){return this.set("mimeType",e)}getURI(){return this.get("uri")}setURI(e){return this.set("uri",e),this.set("mimeType",z.extensionToMimeType(k.extension(e))),this}getImage(){return this.get("image")}setImage(e){return this.set("image",j.assertView(e))}getSize(){const e=this.get("image");return e?z.getSize(e,this.getMimeType()):null}}class Se extends oe{init(){this.propertyType=U.ROOT}getDefaults(){return Object.assign(super.getDefaults(),{asset:{generator:"glTF-Transform v2.0.5",version:"2.0"},defaultScene:null,accessors:[],animations:[],buffers:[],cameras:[],materials:[],meshes:[],nodes:[],scenes:[],skins:[],textures:[]})}constructor(e){super(e),this.h=new Set,e.addEventListener("node:create",(e=>{this.l(e.target)}))}clone(){throw new Error("Root cannot be cloned.")}copy(e,t=ie){if(t===ie)throw new Error("Root cannot be copied.");this.set("asset",we({},e.get("asset"))),this.setName(e.getName()),this.setExtras(we({},e.getExtras())),this.setDefaultScene(e.getDefaultScene()?t(e.getDefaultScene()):null);for(const s of e.listRefMapKeys("extensions")){const r=e.getExtension(s);this.setExtension(s,t(r))}return this}l(e){return e instanceof Ae?this.addRef("scenes",e):e instanceof Re?this.addRef("nodes",e):e instanceof ge?this.addRef("cameras",e):e instanceof Me?this.addRef("skins",e):e instanceof be?this.addRef("meshes",e):e instanceof ye?this.addRef("materials",e):e instanceof Ie?this.addRef("textures",e):e instanceof ce?this.addRef("animations",e):e instanceof ue?this.addRef("accessors",e):e instanceof fe&&this.addRef("buffers",e),this}getAsset(){return this.get("asset")}listExtensionsUsed(){return Array.from(this.h)}listExtensionsRequired(){return this.listExtensionsUsed().filter((e=>e.isRequired()))}g(e){return this.h.add(e),this}p(e){return this.h.delete(e),this}listScenes(){return this.listRefs("scenes")}setDefaultScene(e){return this.setRef("defaultScene",e)}getDefaultScene(){return this.getRef("defaultScene")}listNodes(){return this.listRefs("nodes")}listCameras(){return this.listRefs("cameras")}listSkins(){return this.listRefs("skins")}listMeshes(){return this.listRefs("meshes")}listMaterials(){return this.listRefs("materials")}listTextures(){return this.listRefs("textures")}listAnimations(){return this.listRefs("animations")}listAccessors(){return this.listRefs("accessors")}listBuffers(){return this.listRefs("buffers")}}class _e{constructor(){this.m=new M,this.T=new Se(this.m),this.v=q.DEFAULT_INSTANCE}getRoot(){return this.T}getGraph(){return this.m}getLogger(){return this.v}setLogger(e){return this.v=e,this}clone(){return(new _e).setLogger(this.v).merge(this)}merge(e){for(const t of e.getRoot().listExtensionsUsed()){const e=this.createExtension(t.constructor);t.isRequired()&&e.setRequired(!0)}const t=new Set,s=new Map;t.add(e.T),s.set(e.T,this.T);for(const r of e.m.listEdges())for(const e of[r.getParent(),r.getChild()]){if(t.has(e))continue;let r;r=e.propertyType===U.TEXTURE_INFO?e:new(0,e.constructor)(this.m),s.set(e,r),t.add(e)}const r=e=>{const t=s.get(e);if(!t)throw new Error("Could resolve property.");return t};for(const e of t){const t=s.get(e);if(!t)throw new Error("Could resolve property.");t.copy(e,r)}return this}async transform(...e){const t=e.map((e=>e.name));for(const s of e)await s(this,{stack:t});return this}createExtension(e){const t=e.EXTENSION_NAME;return this.getRoot().listExtensionsUsed().find((e=>e.extensionName===t))||new e(this)}createScene(e=""){return new Ae(this.m,e)}createNode(e=""){return new Re(this.m,e)}createCamera(e=""){return new ge(this.m,e)}createSkin(e=""){return new Me(this.m,e)}createMesh(e=""){return new be(this.m,e)}createPrimitive(){return new xe(this.m)}createPrimitiveTarget(e=""){return new ve(this.m,e)}createMaterial(e=""){return new ye(this.m,e)}createTexture(e=""){return new Ie(this.m,e)}createAnimation(e=""){return new ce(this.m,e)}createAnimationChannel(e=""){return new he(this.m,e)}createAnimationSampler(e=""){return new le(this.m,e)}createAccessor(e="",t=null){return t||(t=this.getRoot().listBuffers()[0]),new ue(this.m,e).setBuffer(t)}createBuffer(e=""){return new fe(this.m,e)}}class Ne{constructor(e){this.jsonDoc=void 0,this.buffers=[],this.bufferViews=[],this.bufferViewBuffers=[],this.accessors=[],this.textures=[],this.textureInfos=new Map,this.materials=[],this.meshes=[],this.cameras=[],this.nodes=[],this.skins=[],this.animations=[],this.scenes=[],this.jsonDoc=e}setTextureInfo(e,t){this.textureInfos.set(e,t),void 0!==t.texCoord&&e.setTexCoord(t.texCoord);const s=this.jsonDoc.json.textures[t.index];if(void 0===s.sampler)return;const r=this.jsonDoc.json.samplers[s.sampler];void 0!==r.magFilter&&e.setMagFilter(r.magFilter),void 0!==r.minFilter&&e.setMinFilter(r.minFilter),void 0!==r.wrapS&&e.setWrapS(r.wrapS),void 0!==r.wrapT&&e.setWrapT(r.wrapT)}}const Ce={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},Oe={logger:q.DEFAULT_INSTANCE,extensions:[],dependencies:{}};function Fe(e,t){const s=t.bufferViews[e.bufferView],r=t.jsonDoc.json.bufferViews[e.bufferView],n=Ce[e.componentType],i=ue.getElementSize(e.type),a=n.BYTES_PER_ELEMENT;if(void 0!==r.byteStride&&r.byteStride!==i*a)return function(e,t){const s=t.bufferViews[e.bufferView],r=t.jsonDoc.json.bufferViews[e.bufferView],n=Ce[e.componentType],i=ue.getElementSize(e.type),a=n.BYTES_PER_ELEMENT,o=e.byteOffset||0,u=new n(e.count*i),c=new DataView(s.buffer,s.byteOffset,s.byteLength),h=r.byteStride;for(let t=0;t<e.count;t++)for(let s=0;s<i;s++){const r=o+t*h+s*a;let n;switch(e.componentType){case ue.ComponentType.FLOAT:n=c.getFloat32(r,!0);break;case ue.ComponentType.UNSIGNED_INT:n=c.getUint32(r,!0);break;case ue.ComponentType.UNSIGNED_SHORT:n=c.getUint16(r,!0);break;case ue.ComponentType.UNSIGNED_BYTE:n=c.getUint8(r);break;case ue.ComponentType.SHORT:n=c.getInt16(r,!0);break;case ue.ComponentType.BYTE:n=c.getInt8(r);break;default:throw new Error(`Unexpected componentType "${e.componentType}".`)}u[t*i+s]=n}return u}(e,t);const o=s.byteOffset+(e.byteOffset||0);return new n(s.buffer.slice(o,o+e.count*i*a))}var Ue;!function(e){e[e.ARRAY_BUFFER=34962]="ARRAY_BUFFER",e[e.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER"}(Ue||(Ue={}));class Be{constructor(e,t,s){this.N=void 0,this.jsonDoc=void 0,this.options=void 0,this.accessorIndexMap=new Map,this.animationIndexMap=new Map,this.bufferIndexMap=new Map,this.cameraIndexMap=new Map,this.skinIndexMap=new Map,this.materialIndexMap=new Map,this.meshIndexMap=new Map,this.nodeIndexMap=new Map,this.imageIndexMap=new Map,this.textureDefIndexMap=new Map,this.textureInfoDefMap=new Map,this.samplerDefIndexMap=new Map,this.sceneIndexMap=new Map,this.imageBufferViews=[],this.otherBufferViews=new Map,this.otherBufferViewsIndexMap=new Map,this.extensionData={},this.bufferURIGenerator=void 0,this.imageURIGenerator=void 0,this.logger=void 0,this.O=new Map,this.accessorUsageGroupedByParent=new Set(["ARRAY_BUFFER"]),this.accessorParents=new Map,this.N=e,this.jsonDoc=t,this.options=s;const r=e.getRoot(),n=r.listBuffers().length,i=r.listTextures().length;this.bufferURIGenerator=new De(n>1,s.basename),this.imageURIGenerator=new De(i>1,s.basename),this.logger=e.getLogger()}createTextureInfoDef(e,t){const s={magFilter:t.getMagFilter()||void 0,minFilter:t.getMinFilter()||void 0,wrapS:t.getWrapS(),wrapT:t.getWrapT()},r=JSON.stringify(s);this.samplerDefIndexMap.has(r)||(this.samplerDefIndexMap.set(r,this.jsonDoc.json.samplers.length),this.jsonDoc.json.samplers.push(s));const n={source:this.imageIndexMap.get(e),sampler:this.samplerDefIndexMap.get(r)},i=JSON.stringify(n);this.textureDefIndexMap.has(i)||(this.textureDefIndexMap.set(i,this.jsonDoc.json.textures.length),this.jsonDoc.json.textures.push(n));const a={index:this.textureDefIndexMap.get(i)};return 0!==t.getTexCoord()&&(a.texCoord=t.getTexCoord()),this.textureInfoDefMap.set(t,a),a}createPropertyDef(e){const t={};return e.getName()&&(t.name=e.getName()),Object.keys(e.getExtras()).length>0&&(t.extras=e.getExtras()),t}createAccessorDef(e){const t=this.createPropertyDef(e);return t.type=e.getType(),t.componentType=e.getComponentType(),t.count=e.getCount(),this.N.getGraph().listParentEdges(e).some((e=>"attributes"===e.getName()&&"POSITION"===e.getAttributes().key||"input"===e.getName()))&&(t.max=e.getMax([]).map(Math.fround),t.min=e.getMin([]).map(Math.fround)),e.getNormalized()&&(t.normalized=e.getNormalized()),t}createImageData(e,t,s){if(this.options.format===P.GLB)this.imageBufferViews.push(t),e.bufferView=this.jsonDoc.json.bufferViews.length,this.jsonDoc.json.bufferViews.push({buffer:0,byteOffset:-1,byteLength:t.byteLength});else{const r=z.mimeTypeToExtension(s.getMimeType());e.uri=this.imageURIGenerator.createURI(s,r),this.jsonDoc.resources[e.uri]=t}}getAccessorUsage(e){const t=this.O.get(e);if(t)return t;for(const t of this.N.getGraph().listParentEdges(e)){const{usage:e}=t.getAttributes();if(e)return e;t.getParent().propertyType!==U.ROOT&&this.N.getLogger().warn(`Missing attribute ".usage" on edge, "${t.getName()}".`)}return Be.BufferViewUsage.OTHER}addAccessorToUsageGroup(e,t){const s=this.O.get(e);if(s&&s!==t)throw new Error(`Accessor with usage "${s}" cannot be reused as "${t}".`);return this.O.set(e,t),this}listAccessorUsageGroups(){const e={};for(const[t,s]of Array.from(this.O.entries()))e[s]=e[s]||[],e[s].push(t);return e}}Be.BufferViewTarget=Ue,Be.BufferViewUsage=D,Be.USAGE_TO_TARGET={[D.ARRAY_BUFFER]:Ue.ARRAY_BUFFER,[D.ELEMENT_ARRAY_BUFFER]:Ue.ELEMENT_ARRAY_BUFFER};class De{constructor(e,t){this.multiple=void 0,this.basename=void 0,this.counter=1,this.multiple=e,this.basename=t}createURI(e,t){return e.getURI()?e.getURI():this.multiple?`${this.basename}_${this.counter++}.${t}`:`${this.basename}.${t}`}}const{BufferViewUsage:Le}=Be;var Pe,je,Ve,ke,Ge,ze,Ye,He,We,qe,Xe;!function(e){e[e.JSON=1313821514]="JSON",e[e.BIN=5130562]="BIN"}(Pe||(Pe={}));class Je extends class{constructor(){this.v=q.DEFAULT_INSTANCE,this.h=new Set,this.C={},this.F=B.INTERLEAVED,this.lastReadBytes=0,this.lastWriteBytes=0}setLogger(e){return this.v=e,this}registerExtensions(e){for(const t of e)this.h.add(t),t.register();return this}registerDependencies(e){return Object.assign(this.C,e),this}setVertexLayout(e){return this.F=e,this}async read(e){return await this.readJSON(await this.readAsJSON(e))}async readAsJSON(e){return e.match(/^data:application\/octet-stream;/)||"glb"===k.extension(e)?this.U(e):this.P(e)}async readJSON(e){return e=this.j(e),this.L(e),class{static read(e,t=Oe){const s=we({},Oe,t),{json:r}=e,n=new _e;this.validate(e,s);const i=new Ne(e),a=r.asset,o=n.getRoot().getAsset();a.copyright&&(o.copyright=a.copyright),a.extras&&(o.extras=a.extras),void 0!==r.extras&&n.getRoot().setExtras(we({},r.extras));const u=r.extensionsUsed||[],c=r.extensionsRequired||[];for(const e of s.extensions)if(u.includes(e.EXTENSION_NAME)){const t=n.createExtension(e).setRequired(c.includes(e.EXTENSION_NAME));for(const e of t.readDependencies)t.install(e,s.dependencies[e])}const h=r.buffers||[];n.getRoot().listExtensionsUsed().filter((e=>e.prereadTypes.includes(U.BUFFER))).forEach((e=>e.preread(i,U.BUFFER))),i.buffers=h.map((e=>{const t=n.createBuffer(e.name);return e.extras&&t.setExtras(e.extras),e.uri&&0!==e.uri.indexOf("__")&&t.setURI(e.uri),t})),i.bufferViewBuffers=(r.bufferViews||[]).map(((t,s)=>{if(!i.bufferViews[s]){const r=e.json.buffers[t.buffer];i.bufferViews[s]=j.toView(r.uri?e.resources[r.uri]:e.resources["@glb.bin"],t.byteOffset||0,t.byteLength)}return i.buffers[t.buffer]})),i.accessors=(r.accessors||[]).map((e=>{const t=n.createAccessor(e.name,i.bufferViewBuffers[e.bufferView]).setType(e.type);if(e.extras&&t.setExtras(e.extras),void 0!==e.normalized&&t.setNormalized(e.normalized),void 0===e.bufferView&&!e.sparse)return t;let s;return s=void 0!==e.sparse?function(e,t){const s=Ce[e.componentType],r=ue.getElementSize(e.type);let n;n=void 0!==e.bufferView?Fe(e,t):new s(e.count*r);const i=e.sparse,a=i.count,o=we({},e,i.indices,{count:a,type:"SCALAR"}),u=we({},e,i.values,{count:a}),c=Fe(o,t),h=Fe(u,t);for(let e=0;e<o.count;e++)for(let t=0;t<r;t++)n[c[e]*r+t]=h[e*r+t];return n}(e,i):Fe(e,i),t.setArray(s),t}));const l=r.images||[],f=r.textures||[];n.getRoot().listExtensionsUsed().filter((e=>e.prereadTypes.includes(U.TEXTURE))).forEach((e=>e.preread(i,U.TEXTURE))),i.textures=l.map((t=>{const s=n.createTexture(t.name);if(t.extras&&s.setExtras(t.extras),void 0!==t.bufferView){const n=r.bufferViews[t.bufferView],i=e.json.buffers[n.buffer],a=n.byteOffset||0,o=(i.uri?e.resources[i.uri]:e.resources["@glb.bin"]).slice(a,a+n.byteLength);s.setImage(o)}else void 0!==t.uri&&(s.setImage(e.resources[t.uri]),0!==t.uri.indexOf("__")&&s.setURI(t.uri));if(void 0!==t.mimeType)s.setMimeType(t.mimeType);else if(t.uri){const e=k.extension(t.uri);s.setMimeType(z.extensionToMimeType(e))}return s})),i.materials=(r.materials||[]).map((e=>{const t=n.createMaterial(e.name);e.extras&&t.setExtras(e.extras),void 0!==e.alphaMode&&t.setAlphaMode(e.alphaMode),void 0!==e.alphaCutoff&&t.setAlphaCutoff(e.alphaCutoff),void 0!==e.doubleSided&&t.setDoubleSided(e.doubleSided);const s=e.pbrMetallicRoughness||{};if(void 0!==s.baseColorFactor&&t.setBaseColorFactor(s.baseColorFactor),void 0!==e.emissiveFactor&&t.setEmissiveFactor(e.emissiveFactor),void 0!==s.metallicFactor&&t.setMetallicFactor(s.metallicFactor),void 0!==s.roughnessFactor&&t.setRoughnessFactor(s.roughnessFactor),void 0!==s.baseColorTexture){const e=s.baseColorTexture;t.setBaseColorTexture(i.textures[f[e.index].source]),i.setTextureInfo(t.getBaseColorTextureInfo(),e)}if(void 0!==e.emissiveTexture){const s=e.emissiveTexture;t.setEmissiveTexture(i.textures[f[s.index].source]),i.setTextureInfo(t.getEmissiveTextureInfo(),s)}if(void 0!==e.normalTexture){const s=e.normalTexture;t.setNormalTexture(i.textures[f[s.index].source]),i.setTextureInfo(t.getNormalTextureInfo(),s),void 0!==e.normalTexture.scale&&t.setNormalScale(e.normalTexture.scale)}if(void 0!==e.occlusionTexture){const s=e.occlusionTexture;t.setOcclusionTexture(i.textures[f[s.index].source]),i.setTextureInfo(t.getOcclusionTextureInfo(),s),void 0!==e.occlusionTexture.strength&&t.setOcclusionStrength(e.occlusionTexture.strength)}if(void 0!==s.metallicRoughnessTexture){const e=s.metallicRoughnessTexture;t.setMetallicRoughnessTexture(i.textures[f[e.index].source]),i.setTextureInfo(t.getMetallicRoughnessTextureInfo(),e)}return t}));const g=r.meshes||[];n.getRoot().listExtensionsUsed().filter((e=>e.prereadTypes.includes(U.PRIMITIVE))).forEach((e=>e.preread(i,U.PRIMITIVE))),i.meshes=g.map((e=>{const t=n.createMesh(e.name);return e.extras&&t.setExtras(e.extras),void 0!==e.weights&&t.setWeights(e.weights),(e.primitives||[]).forEach((s=>{const r=n.createPrimitive();s.extras&&r.setExtras(s.extras),void 0!==s.material&&r.setMaterial(i.materials[s.material]),void 0!==s.mode&&r.setMode(s.mode);for(const[e,t]of Object.entries(s.attributes||{}))r.setAttribute(e,i.accessors[t]);void 0!==s.indices&&r.setIndices(i.accessors[s.indices]);const a=e.extras&&e.extras.targetNames||[];(s.targets||[]).forEach(((e,t)=>{const s=a[t]||t.toString(),o=n.createPrimitiveTarget(s);for(const[t,s]of Object.entries(e))o.setAttribute(t,i.accessors[s]);r.addTarget(o)})),t.addPrimitive(r)})),t})),i.cameras=(r.cameras||[]).map((e=>{const t=n.createCamera(e.name).setType(e.type);if(e.extras&&t.setExtras(e.extras),e.type===ge.Type.PERSPECTIVE){const s=e.perspective;t.setYFov(s.yfov),t.setZNear(s.znear),void 0!==s.zfar&&t.setZFar(s.zfar),void 0!==s.aspectRatio&&t.setAspectRatio(s.aspectRatio)}else{const s=e.orthographic;t.setZNear(s.znear).setZFar(s.zfar).setXMag(s.xmag).setYMag(s.ymag)}return t}));const p=r.nodes||[];n.getRoot().listExtensionsUsed().filter((e=>e.prereadTypes.includes(U.NODE))).forEach((e=>e.preread(i,U.NODE))),i.nodes=p.map((e=>{const t=n.createNode(e.name);if(e.extras&&t.setExtras(e.extras),void 0!==e.translation&&t.setTranslation(e.translation),void 0!==e.rotation&&t.setRotation(e.rotation),void 0!==e.scale&&t.setScale(e.scale),void 0!==e.matrix){const s=[0,0,0],r=[0,0,0,1],n=[1,1,1];X.decompose(e.matrix,s,r,n),t.setTranslation(s),t.setRotation(r),t.setScale(n)}return void 0!==e.weights&&t.setWeights(e.weights),t})),i.skins=(r.skins||[]).map((e=>{const t=n.createSkin(e.name);e.extras&&t.setExtras(e.extras),void 0!==e.inverseBindMatrices&&t.setInverseBindMatrices(i.accessors[e.inverseBindMatrices]),void 0!==e.skeleton&&t.setSkeleton(i.nodes[e.skeleton]);for(const s of e.joints)t.addJoint(i.nodes[s]);return t})),p.map(((e,t)=>{const s=i.nodes[t];(e.children||[]).forEach((e=>s.addChild(i.nodes[e]))),void 0!==e.mesh&&s.setMesh(i.meshes[e.mesh]),void 0!==e.camera&&s.setCamera(i.cameras[e.camera]),void 0!==e.skin&&s.setSkin(i.skins[e.skin])})),i.animations=(r.animations||[]).map((e=>{const t=n.createAnimation(e.name);e.extras&&t.setExtras(e.extras);const s=(e.samplers||[]).map((e=>{const s=n.createAnimationSampler().setInput(i.accessors[e.input]).setOutput(i.accessors[e.output]).setInterpolation(e.interpolation||le.Interpolation.LINEAR);return e.extras&&s.setExtras(e.extras),t.addSampler(s),s}));return(e.channels||[]).forEach((e=>{const r=n.createAnimationChannel().setSampler(s[e.sampler]).setTargetNode(i.nodes[e.target.node]).setTargetPath(e.target.path);e.extras&&r.setExtras(e.extras),t.addChannel(r)})),t}));const d=r.scenes||[];return n.getRoot().listExtensionsUsed().filter((e=>e.prereadTypes.includes(U.SCENE))).forEach((e=>e.preread(i,U.SCENE))),i.scenes=d.map((e=>{const t=n.createScene(e.name);return e.extras&&t.setExtras(e.extras),(e.nodes||[]).map((e=>i.nodes[e])).forEach((e=>t.addChild(e))),t})),void 0!==r.scene&&n.getRoot().setDefaultScene(i.scenes[r.scene]),n.getRoot().listExtensionsUsed().forEach((e=>e.read(i))),n}static validate(e,t){const s=e.json;if("2.0"!==s.asset.version)throw new Error(`Unsupported glTF version, "${s.asset.version}".`);if(s.extensionsRequired)for(const e of s.extensionsRequired)if(!t.extensions.find((t=>t.EXTENSION_NAME===e)))throw new Error(`Missing required extension, "${e}".`);if(s.extensionsUsed)for(const e of s.extensionsUsed)t.extensions.find((t=>t.EXTENSION_NAME===e))||t.logger.warn(`Missing optional extension, "${e}".`)}}.read(e,{extensions:Array.from(this.h),dependencies:this.C,logger:this.v})}async binaryToJSON(e){const t=this._(j.assertView(e));this.L(t);const s=t.json;if(s.buffers&&s.buffers.some((e=>function(e,t){return void 0!==t.uri&&!(t.uri in e.resources)}(t,e))))throw new Error("Cannot resolve external buffers with binaryToJSON().");if(s.images&&s.images.some((e=>function(e,t){return void 0!==t.uri&&!(t.uri in e.resources)&&void 0===t.bufferView}(t,e))))throw new Error("Cannot resolve external images with binaryToJSON().");return t}async readBinary(e){return this.readJSON(await this.binaryToJSON(j.assertView(e)))}async writeJSON(e,t={}){if(t.format===P.GLB&&e.getRoot().listBuffers().length>1)throw new Error("GLB must have 0–1 buffers.");return class{static write(e,t){const s=e.getRoot(),r={asset:we({generator:"glTF-Transform v2.0.5"},s.getAsset()),extras:we({},s.getExtras())},n={json:r,resources:{}},i=new Be(e,n,t),a=t.logger||q.DEFAULT_INSTANCE,o=new Set(t.extensions.map((e=>e.EXTENSION_NAME))),u=e.getRoot().listExtensionsUsed().filter((e=>o.has(e.extensionName))),c=e.getRoot().listExtensionsRequired().filter((e=>o.has(e.extensionName)));u.length<e.getRoot().listExtensionsUsed().length&&a.debug("Some extensions were not registered for I/O, and will not be written.");for(const e of u)for(const s of e.writeDependencies)e.install(s,t.dependencies[s]);function h(e,t,s,n){const a=[];let o=0;for(const t of e){const e=i.createAccessorDef(t);e.bufferView=r.bufferViews.length;const s=t.getArray(),n=j.pad(j.toView(s));e.byteOffset=o,o+=n.byteLength,a.push(n),i.accessorIndexMap.set(t,r.accessors.length),r.accessors.push(e)}const u={buffer:t,byteOffset:s,byteLength:j.concat(a).byteLength};return n&&(u.target=n),r.bufferViews.push(u),{buffers:a,byteLength:o}}function l(e,t,s){const n=e[0].getCount();let a=0;for(const t of e){const e=i.createAccessorDef(t);e.bufferView=r.bufferViews.length,e.byteOffset=a;const s=t.getElementSize(),n=t.getComponentSize();a+=j.padNumber(s*n),i.accessorIndexMap.set(t,r.accessors.length),r.accessors.push(e)}const o=n*a,u=new ArrayBuffer(o),c=new DataView(u);for(let t=0;t<n;t++){let s=0;for(const r of e){const e=r.getElementSize(),n=r.getComponentSize(),i=r.getComponentType(),o=r.getArray();for(let r=0;r<e;r++){const u=t*a+s+r*n,h=o[t*e+r];switch(i){case ue.ComponentType.FLOAT:c.setFloat32(u,h,!0);break;case ue.ComponentType.BYTE:c.setInt8(u,h);break;case ue.ComponentType.SHORT:c.setInt16(u,h,!0);break;case ue.ComponentType.UNSIGNED_BYTE:c.setUint8(u,h);break;case ue.ComponentType.UNSIGNED_SHORT:c.setUint16(u,h,!0);break;case ue.ComponentType.UNSIGNED_INT:c.setUint32(u,h,!0);break;default:throw new Error("Unexpected component type: "+i)}}s+=j.padNumber(e*n)}}return r.bufferViews.push({buffer:t,byteOffset:s,byteLength:o,byteStride:a,target:Be.BufferViewTarget.ARRAY_BUFFER}),{byteLength:o,buffers:[new Uint8Array(u)]}}const f=new Map;for(const t of e.getGraph().listEdges()){if(t.getParent()===s)continue;const e=t.getChild();if(e instanceof ue){const s=f.get(e)||[];s.push(t),f.set(e,s)}}if(r.accessors=[],r.bufferViews=[],r.samplers=[],r.textures=[],r.images=s.listTextures().map(((e,t)=>{const s=i.createPropertyDef(e);e.getMimeType()&&(s.mimeType=e.getMimeType());const r=e.getImage();return r&&i.createImageData(s,r,e),i.imageIndexMap.set(e,t),s})),u.filter((e=>e.prewriteTypes.includes(U.ACCESSOR))).forEach((e=>e.prewrite(i,U.ACCESSOR))),s.listAccessors().forEach((e=>{const t=i.accessorUsageGroupedByParent,s=i.accessorParents;if(i.accessorIndexMap.has(e))return;const r=f.get(e)||[],n=i.getAccessorUsage(e);if(i.addAccessorToUsageGroup(e,n),t.has(n)){const t=r[0].getParent(),n=s.get(t)||new Set;n.add(e),s.set(t,n)}})),u.filter((e=>e.prewriteTypes.includes(U.BUFFER))).forEach((e=>e.prewrite(i,U.BUFFER))),(s.listAccessors().length>0||s.listTextures().length>0||i.otherBufferViews.size>0)&&0===s.listBuffers().length)throw new Error("Buffer required for Document resources, but none was found.");r.buffers=[],s.listBuffers().forEach(((e,s)=>{const a=i.createPropertyDef(e),o=i.accessorUsageGroupedByParent,u=i.accessorParents,c=e.listParents().filter((e=>e instanceof ue)),f=new Set(c),g=[],p=r.buffers.length;let d=0;const m=i.listAccessorUsageGroups();for(const e in m)if(o.has(e))for(const s of Array.from(u.values())){const r=Array.from(s).filter((e=>f.has(e))).filter((t=>i.getAccessorUsage(t)===e));if(r.length)if(e!==Le.ARRAY_BUFFER||t.vertexLayout===B.INTERLEAVED){const t=e===Le.ARRAY_BUFFER?l(r,p,d):h(r,p,d);d+=t.byteLength,g.push(...t.buffers)}else for(const e of r){const t=l([e],p,d);d+=t.byteLength,g.push(...t.buffers)}}else{const t=m[e].filter((e=>f.has(e)));if(!t.length)continue;const s=h(t,p,d,e===Le.ELEMENT_ARRAY_BUFFER?Be.BufferViewTarget.ELEMENT_ARRAY_BUFFER:void 0);d+=s.byteLength,g.push(...s.buffers)}if(i.imageBufferViews.length&&0===s)for(let e=0;e<i.imageBufferViews.length;e++)if(r.bufferViews[r.images[e].bufferView].byteOffset=d,d+=i.imageBufferViews[e].byteLength,g.push(i.imageBufferViews[e]),d%8){const e=8-d%8;d+=e,g.push(new Uint8Array(e))}if(i.otherBufferViews.has(e))for(const t of i.otherBufferViews.get(e))r.bufferViews.push({buffer:p,byteOffset:d,byteLength:t.byteLength}),i.otherBufferViewsIndexMap.set(t,r.bufferViews.length-1),d+=t.byteLength,g.push(t);if(d){let s;t.format===P.GLB?s="@glb.bin":(s=i.bufferURIGenerator.createURI(e,"bin"),a.uri=s),a.byteLength=d,n.resources[s]=j.concat(g)}r.buffers.push(a),i.bufferIndexMap.set(e,s)})),s.listAccessors().find((e=>!e.getBuffer()))&&a.warn("Skipped writing one or more Accessors: no Buffer assigned."),r.materials=s.listMaterials().map(((e,t)=>{const s=i.createPropertyDef(e);if(e.getAlphaMode()!==ye.AlphaMode.OPAQUE&&(s.alphaMode=e.getAlphaMode()),e.getAlphaMode()===ye.AlphaMode.MASK&&(s.alphaCutoff=e.getAlphaCutoff()),e.getDoubleSided()&&(s.doubleSided=!0),s.pbrMetallicRoughness={},X.eq(e.getBaseColorFactor(),[1,1,1,1])||(s.pbrMetallicRoughness.baseColorFactor=e.getBaseColorFactor()),X.eq(e.getEmissiveFactor(),[0,0,0])||(s.emissiveFactor=e.getEmissiveFactor()),1!==e.getRoughnessFactor()&&(s.pbrMetallicRoughness.roughnessFactor=e.getRoughnessFactor()),1!==e.getMetallicFactor()&&(s.pbrMetallicRoughness.metallicFactor=e.getMetallicFactor()),e.getBaseColorTexture()){const t=e.getBaseColorTexture(),r=e.getBaseColorTextureInfo();s.pbrMetallicRoughness.baseColorTexture=i.createTextureInfoDef(t,r)}if(e.getEmissiveTexture()){const t=e.getEmissiveTexture(),r=e.getEmissiveTextureInfo();s.emissiveTexture=i.createTextureInfoDef(t,r)}if(e.getNormalTexture()){const t=e.getNormalTexture(),r=e.getNormalTextureInfo(),n=i.createTextureInfoDef(t,r);1!==e.getNormalScale()&&(n.scale=e.getNormalScale()),s.normalTexture=n}if(e.getOcclusionTexture()){const t=e.getOcclusionTexture(),r=e.getOcclusionTextureInfo(),n=i.createTextureInfoDef(t,r);1!==e.getOcclusionStrength()&&(n.strength=e.getOcclusionStrength()),s.occlusionTexture=n}if(e.getMetallicRoughnessTexture()){const t=e.getMetallicRoughnessTexture(),r=e.getMetallicRoughnessTextureInfo();s.pbrMetallicRoughness.metallicRoughnessTexture=i.createTextureInfoDef(t,r)}return i.materialIndexMap.set(e,t),s})),r.meshes=s.listMeshes().map(((e,t)=>{const s=i.createPropertyDef(e);let r=null;return s.primitives=e.listPrimitives().map((e=>{const t={attributes:{}};t.mode=e.getMode();const s=e.getMaterial();s&&(t.material=i.materialIndexMap.get(s)),Object.keys(e.getExtras()).length&&(t.extras=e.getExtras());const n=e.getIndices();n&&(t.indices=i.accessorIndexMap.get(n));for(const s of e.listSemantics())t.attributes[s]=i.accessorIndexMap.get(e.getAttribute(s));for(const s of e.listTargets()){const e={};for(const t of s.listSemantics())e[t]=i.accessorIndexMap.get(s.getAttribute(t));t.targets=t.targets||[],t.targets.push(e)}return e.listTargets().length&&!r&&(r=e.listTargets().map((e=>e.getName()))),t})),e.getWeights().length&&(s.weights=e.getWeights()),r&&(s.extras=s.extras||{},s.extras.targetNames=r),i.meshIndexMap.set(e,t),s})),r.cameras=s.listCameras().map(((e,t)=>{const s=i.createPropertyDef(e);if(s.type=e.getType(),s.type===ge.Type.PERSPECTIVE){s.perspective={znear:e.getZNear(),zfar:e.getZFar(),yfov:e.getYFov()};const t=e.getAspectRatio();null!==t&&(s.perspective.aspectRatio=t)}else s.orthographic={znear:e.getZNear(),zfar:e.getZFar(),xmag:e.getXMag(),ymag:e.getYMag()};return i.cameraIndexMap.set(e,t),s})),r.nodes=s.listNodes().map(((e,t)=>{const s=i.createPropertyDef(e);return X.eq(e.getTranslation(),[0,0,0])||(s.translation=e.getTranslation()),X.eq(e.getRotation(),[0,0,0,1])||(s.rotation=e.getRotation()),X.eq(e.getScale(),[1,1,1])||(s.scale=e.getScale()),e.getWeights().length&&(s.weights=e.getWeights()),i.nodeIndexMap.set(e,t),s})),r.skins=s.listSkins().map(((e,t)=>{const s=i.createPropertyDef(e),r=e.getInverseBindMatrices();r&&(s.inverseBindMatrices=i.accessorIndexMap.get(r));const n=e.getSkeleton();return n&&(s.skeleton=i.nodeIndexMap.get(n)),s.joints=e.listJoints().map((e=>i.nodeIndexMap.get(e))),i.skinIndexMap.set(e,t),s})),s.listNodes().forEach(((e,t)=>{const s=r.nodes[t],n=e.getMesh();n&&(s.mesh=i.meshIndexMap.get(n));const a=e.getCamera();a&&(s.camera=i.cameraIndexMap.get(a));const o=e.getSkin();o&&(s.skin=i.skinIndexMap.get(o)),e.listChildren().length>0&&(s.children=e.listChildren().map((e=>i.nodeIndexMap.get(e))))})),r.animations=s.listAnimations().map(((e,t)=>{const s=i.createPropertyDef(e),r=new Map;return s.samplers=e.listSamplers().map(((e,t)=>{const s=i.createPropertyDef(e);return s.input=i.accessorIndexMap.get(e.getInput()),s.output=i.accessorIndexMap.get(e.getOutput()),s.interpolation=e.getInterpolation(),r.set(e,t),s})),s.channels=e.listChannels().map((e=>{const t=i.createPropertyDef(e);return t.sampler=r.get(e.getSampler()),t.target={node:i.nodeIndexMap.get(e.getTargetNode()),path:e.getTargetPath()},t})),i.animationIndexMap.set(e,t),s})),r.scenes=s.listScenes().map(((e,t)=>{const s=i.createPropertyDef(e);return s.nodes=e.listChildren().map((e=>i.nodeIndexMap.get(e))),i.sceneIndexMap.set(e,t),s}));const g=s.getDefaultScene();return g&&(r.scene=s.listScenes().indexOf(g)),r.extensionsUsed=u.map((e=>e.extensionName)),r.extensionsRequired=c.map((e=>e.extensionName)),u.forEach((e=>e.write(i))),function(e){const t=[];for(const s in e){const r=e[s];(Array.isArray(r)&&0===r.length||null===r||""===r||r&&"object"==typeof r&&0===Object.keys(r).length)&&t.push(s)}for(const s of t)delete e[s]}(r),n}}.write(e,{format:t.format||P.GLTF,basename:t.basename||"",logger:this.v,vertexLayout:this.F,dependencies:we({},this.C),extensions:Array.from(this.h)})}async writeBinary(e){const{json:t,resources:s}=await this.writeJSON(e,{format:P.GLB}),r=new Uint32Array([1179937895,2,12]),n=JSON.stringify(t),i=j.pad(j.encodeText(n),32),a=j.toView(new Uint32Array([i.byteLength,1313821514])),o=j.concat([a,i]);r[r.length-1]+=o.byteLength;const u=Object.values(s)[0];if(!u||!u.byteLength)return j.concat([j.toView(r),o]);const c=j.pad(u,0),h=j.toView(new Uint32Array([c.byteLength,5130562])),l=j.concat([h,c]);return r[r.length-1]+=l.byteLength,j.concat([j.toView(r),o,l])}async P(e){this.lastReadBytes=0;const t=await this.readURI(e,"text");this.lastReadBytes+=t.length;const s={json:JSON.parse(t),resources:{}};return await this.D(s,this.dirname(e)),this.L(s),s}async U(e){const t=await this.readURI(e,"view");this.lastReadBytes=t.byteLength;const s=this._(t);return await this.D(s,this.dirname(e)),this.L(s),s}async D(e,t){var s=this;const r=[...e.json.images||[],...e.json.buffers||[]].map((async function(r){const n=r.uri;if(!n||n.match(/data:/))return Promise.resolve();e.resources[n]=await s.readURI(s.resolve(t,n),"view"),s.lastReadBytes+=e.resources[n].byteLength}));await Promise.all(r)}L(e){function t(t){if(t.uri)if(t.uri in e.resources)j.assertView(e.resources[t.uri]);else if(t.uri.match(/data:/)){const s=`__${function(){for(let e=0;e<999;e++){const e=re();if(!se.has(e))return se.add(e),e}return""}()}.${k.extension(t.uri)}`;e.resources[s]=j.createBufferFromDataURI(t.uri),t.uri=s}}(e.json.images||[]).forEach((e=>{if(void 0===e.bufferView&&void 0===e.uri)throw new Error("Missing resource URI or buffer view.");t(e)})),(e.json.buffers||[]).forEach(t)}j(e){const{images:t,buffers:s}=e.json;return e={json:we({},e.json),resources:we({},e.resources)},t&&(e.json.images=t.map((e=>we({},e)))),s&&(e.json.buffers=s.map((e=>we({},e)))),e}_(e){const t=new Uint32Array(e.buffer,e.byteOffset,3);if(1179937895!==t[0])throw new Error("Invalid glTF asset.");if(2!==t[1])throw new Error(`Unsupported glTF binary version, "${t[1]}".`);const s=new Uint32Array(e.buffer,e.byteOffset+12,2);if(s[1]!==Pe.JSON)throw new Error("Missing required GLB JSON chunk.");const r=s[0],n=j.decodeText(j.toView(e,20,r)),i=JSON.parse(n),a=20+r;if(e.byteLength<=a)return{json:i,resources:{}};const o=new Uint32Array(e.buffer,e.byteOffset+a,2);if(o[1]!==Pe.BIN)throw new Error("Expected GLB BIN in second chunk.");return{json:i,resources:{"@glb.bin":j.toView(e,a+8,o[0])}}}}{constructor(e=ne.DEFAULT_INIT){super(),this.V=void 0,this.V=e}async readURI(e,t){const s=await fetch(e,this.V);switch(t){case"view":return new Uint8Array(await s.arrayBuffer());case"text":return s.text()}}resolve(e,t){return ne.resolve(e,t)}dirname(e){return ne.dirname(e)}}const $e=.1*Math.PI/180;var Ke,Ze,Qe,et,tt,st,rt=45,nt=-90,it=0,at=!1,ot=0,ut=0,ct=!1,ht=!1,lt=!1,ft=!1,gt=!1,pt=!1;class dt{messageBus;constructor(e){if(this.messageBus=s.getInstance(),null==(Ve=e))throw new Error("Canvas initialization failed!");if(void 0===(je=Ve.getContext("webgl2")))throw new Error("Unable to initiaze WebGL");this.messageBus.addSubscription(y,this),this.messageBus.addSubscription(b,this),this.messageBus.addSubscription(R,this),this.messageBus.addSubscription(x,this);var n=new Image;n.onload=e=>{this.init(n),this.messageBus.post(new t("renderer_started",this))},n.onerror=e=>{console.log(e)},n.src=r.default}receiveMessage(e){let t=e.identifier,s=e.payload;if(t==y)switch(s){case"w":ct=!0;break;case"a":ht=!0;break;case"s":lt=!0;break;case"d":ft=!0;break;case"e":gt=!0;break;case"q":pt=!0}else if(t==b)switch(s){case"w":ct=!1;break;case"a":ht=!1;break;case"s":lt=!1;break;case"d":ft=!1;break;case"e":gt=!1;break;case"q":pt=!1}t==R?(this.messageBus.addSubscription(v,this),at=!0,mt(s)):t==x&&this.messageBus.removeSubscription(v,this),t==v&&mt(s)}get getRenderer(){return this}async init(e){var t=dt.createShader(je,je.VERTEX_SHADER,"#version 300 es\n\n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nlayout(location=0)in vec3 a_position;\nlayout(location=1)in vec2 a_texCoord;\n\nout vec2 texCoord;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main(){\n  \n  gl_Position=projection*view*model*vec4(a_position,1.);\n  texCoord=a_texCoord;\n}\n"),s=dt.createShader(je,je.FRAGMENT_SHADER,"#version 300 es\n \nprecision highp float;\n\nout vec4 FragColor;\n\nin vec2 texCoord;\n\nuniform sampler2D u_texture;\n\n\nvoid main() {\n  //Look up colour from texture\n  FragColor=texture(u_texture, texCoord);\n}\n"),r=dt.createShader(je,je.VERTEX_SHADER,"#version 300 es\nin vec4 a_position;\nin vec3 a_normal;\n\nuniform mat4 u_projection;\nuniform mat4 u_view;\nuniform mat4 u_world;\n\nout vec3 v_normal;\n\nvoid main(){\n    gl_Position=u_projection*u_view*u_world*a_position;\n    v_normal=mat3(u_world)*a_normal;\n}"),n=dt.createShader(je,je.FRAGMENT_SHADER,"#version 300 es\n  precision highp float;\n \n  in vec3 v_normal;\n \n  uniform vec4 u_diffuse;\n  uniform vec3 u_lightDirection;\n \n  out vec4 outColor;\n \n  void main () {\n    vec3 normal = normalize(v_normal);\n    float fakeLight = dot(u_lightDirection, normal) * .5 + .5;\n    outColor = vec4(u_diffuse.rgb * fakeLight, u_diffuse.a);\n  }");dt.createProgram(je,r,n);var i=ke=dt.createProgram(je,t,s);if(je.useProgram(i),null==i)throw new Error("Program creation failed!");dt.resizeCanvasToDisplaySize(Ve),Ke=l(0,0,3),et=l(0,0,-1),Ze=l(0,1,0),Qe=c,a(384)("./binaryCube.glb").then((async e=>{var t=e.default;const s=new Je({credentials:"include"}),r=await s.readBinary(t);console.log(r)})),He=new Uint16Array([0,1,3,1,2,3]),We=m(We=p(),We,u(-55),l(1,0,0)),qe=T(qe=p(),l(0,0,3),l(0,0,0),l(0,1,0)),rt=je.canvas.clientHeight*$e,Xe=p(),Xe=E(Xe,rt,Ve.clientWidth/Ve.clientHeight,.1,100),Ge=je.createVertexArray(),je.bindVertexArray(Ge);var o=je.createBuffer();je.bindBuffer(je.ARRAY_BUFFER,o),je.bufferData(je.ARRAY_BUFFER,new Float32Array([-.5,-.5,-.5,0,0,.5,-.5,-.5,1,0,.5,.5,-.5,1,1,.5,.5,-.5,1,1,-.5,.5,-.5,0,1,-.5,-.5,-.5,0,0,-.5,-.5,.5,0,0,.5,-.5,.5,1,0,.5,.5,.5,1,1,.5,.5,.5,1,1,-.5,.5,.5,0,1,-.5,-.5,.5,0,0,-.5,.5,.5,1,0,-.5,.5,-.5,1,1,-.5,-.5,-.5,0,1,-.5,-.5,-.5,0,1,-.5,-.5,.5,0,0,-.5,.5,.5,1,0,.5,.5,.5,1,0,.5,.5,-.5,1,1,.5,-.5,-.5,0,1,.5,-.5,-.5,0,1,.5,-.5,.5,0,0,.5,.5,.5,1,0,-.5,-.5,-.5,0,1,.5,-.5,-.5,1,1,.5,-.5,.5,1,0,.5,-.5,.5,1,0,-.5,-.5,.5,0,0,-.5,-.5,-.5,0,1,-.5,.5,-.5,0,1,.5,.5,-.5,1,1,.5,.5,.5,1,0,.5,.5,.5,1,0,-.5,.5,.5,0,0,-.5,.5,-.5,0,1]),je.STATIC_DRAW),Ye=je.createBuffer(),je.bindBuffer(je.ELEMENT_ARRAY_BUFFER,Ye),je.bufferData(je.ELEMENT_ARRAY_BUFFER,He,je.STATIC_DRAW),je.vertexAttribPointer(0,3,je.FLOAT,!1,20,0),je.enableVertexAttribArray(0),je.vertexAttribPointer(1,2,je.FLOAT,!1,20,12),je.enableVertexAttribArray(1),ze=je.createTexture(),je.bindTexture(je.TEXTURE_2D,ze),je.texParameteri(je.TEXTURE_2D,je.TEXTURE_WRAP_S,je.REPEAT),je.texParameteri(je.TEXTURE_2D,je.TEXTURE_WRAP_T,je.REPEAT),je.texParameteri(je.TEXTURE_2D,je.TEXTURE_MIN_FILTER,je.LINEAR_MIPMAP_LINEAR),je.texParameteri(je.TEXTURE_2D,je.TEXTURE_MAG_FILTER,je.LINEAR);let h=je.TEXTURE_2D,f=je.RGBA,g=je.RGBA,d=je.UNSIGNED_BYTE;je.texImage2D(h,0,f,g,d,e),je.generateMipmap(je.TEXTURE_2D),je.enable(je.DEPTH_TEST),this.render()}render(){var e=Date.now();ot=e-ut,ut=e,this.processInput(),dt.resizeCanvasToDisplaySize(Ve)&&(Xe=E(Xe,rt,Ve.clientWidth/Ve.clientHeight,.1,100)),je.viewport(0,0,je.canvas.width,je.canvas.height),je.clear(je.COLOR_BUFFER_BIT|je.DEPTH_BUFFER_BIT),je.clearColor(0,0,0,1),je.useProgram(ke),je.bindTexture(je.TEXTURE_2D,ze),je.bindVertexArray(Ge),We=m(We,We,u(-.5),l(1,1,.5));var t=l(0,0,0);!function(e,t,s){e[0]=t[0]+s[0],e[1]=t[1]+s[1],e[2]=t[2]+s[2]}(t,Ke,et),T(qe,Ke,t,Ze);let s=je.getUniformLocation(ke,"model"),r=je.getUniformLocation(ke,"view"),n=je.getUniformLocation(ke,"projection");je.uniformMatrix4fv(s,!1,We),je.uniformMatrix4fv(r,!1,qe),je.uniformMatrix4fv(n,!1,Xe),je.TRIANGLES,je.UNSIGNED_SHORT,je.drawArrays(je.TRIANGLES,0,36)}static createShader(e,t,s){var r=e.createShader(t);if(e.shaderSource(r,s),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;console.log(e.getShaderInfoLog(r)),e.deleteShader(r)}static createProgram(e,t,s){var r=e.createProgram();if(e.attachShader(r,t),e.attachShader(r,s),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;console.log(e.getProgramInfoLog(r)),e.deleteProgram(r)}static resizeCanvasToDisplaySize(e){const t=e.clientWidth,s=e.clientHeight,r=e.width!==t||e.height!==s;return r&&(e.width=t,e.height=s),r}processInput(){let e=.005*ot;ct&&f(Ke,Ke,et,e),ht&&(g(Qe,et,Ze),f(Ke,Ke,Qe,-e)),lt&&f(Ke,Ke,et,-e),ft&&(g(Qe,et,Ze),f(Ke,Ke,Qe,e)),gt&&(g(Qe,et,Ze),f(Ke,Ke,Ze,e)),pt&&(g(Qe,et,Ze),f(Ke,Ke,Ze,-e))}}function mt(e){at&&(tt=e[0],st=e[1],at=!1);let t=e[0]-tt,s=st-e[1];tt=e[0],st=e[1],t*=.1,s*=.1,nt+=t;let r=u(it=(it=(it+=s)>89?89:it)<-89?-89:it),n=u(nt),i=l(Math.cos(n)*Math.cos(r),Math.sin(r),Math.sin(n)*Math.cos(r));!function(e,t){var s=t[0],r=t[1],n=t[2],i=s*s+r*r+n*n;i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i}(et,i)}class Et{targetElement;renderer;messageBus;constructor(e,t){this.targetElement=e,this.renderer=t,this.messageBus=s.getInstance()}receiveMessage(e){}update(){}initInputEvents(){this.targetElement.tabIndex=1e3,this.targetElement.onkeydown=e=>{if(e.repeat)return;new Event(y);let s=e.key;this.messageBus.post(new t(y,this,s))},this.targetElement.onkeyup=e=>{if(e.repeat)return;let s=e.key;this.messageBus.post(new t(b,this,s))},this.targetElement.onmousedown=e=>{this.messageBus.post(new t(R,this,[e.pageX,e.pageY]))},this.targetElement.onmouseup=e=>{this.messageBus.post(new t(x,this,[e.pageX,e.pageY]))},this.targetElement.onmousemove=e=>{this.messageBus.post(new t(v,this,[e.pageX,e.pageY]))}}requestPointerLock(){this.targetElement.requestPointerLock()}exitPointerLock(){document.exitPointerLock()}}class Tt{_canvas;_renderer;_messageBus;_render=!1;constructor(e="vertigoCanvas"){if(this._canvas=document.getElementById(e),void 0===this._canvas)throw new Error("FATAL: Cannot find destination canvas element with name:"+e)}receiveMessage(e){console.log("engine received "+e.identifier),this._render=!0}initialize(){this._messageBus=s.getInstance(),this._messageBus.addSubscription("renderer_started",this),this._renderer=new dt(this._canvas),new Et(this._canvas,this._renderer).initInputEvents(),this.run()}static sendInputMessage(e){}run(){const e=()=>{this._messageBus.update(),this._render&&this._renderer.render(),window.requestAnimationFrame(e)};window.requestAnimationFrame(e)}}window.onload=function(){(new Tt).initialize()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,