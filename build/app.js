(()=>{"use strict";var e,r={};r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),function(e){e[e.NORMAL=0]="NORMAL",e[e.HIGH=1]="HIGH"}(e||(e={}));var t=function(r,t,n,o){void 0===o&&(o=e.NORMAL),this.identifier=r,this.sender=t,this.payload=n,this.priority=o},n=function(){function r(){}return r.addSubscription=function(e,t){var n=r._subscriberMap[e];void 0===n&&(r._subscriberMap[e]=[],n=[]),-1!==n.indexOf(t)?console.warn(t+" already exists in sub map with key "+e):r._subscriberMap[e].push(t)},r.removeSubscription=function(e,t){var n=r._subscriberMap[e];if(void 0!==n){var o=n.indexOf(t);-1!==o&&r._subscriberMap[e].splice(o,1)}else console.warn(t+" not subscribed to "+e)},r.post=function(t){var n=r._subscriberMap[t.identifier];if(void 0!==n)for(var o=0,i=n;o<i.length;o++){var a=i[o];t.priority==e.HIGH?a.receiveMessage(t):r._messageQueue.push(t)}else console.log("Message "+t+" not posted: No subscribers ")},r.update=function(){if(0!==r._messageQueue.length)for(var e=Math.min(r._normalMessageCapacity,r._messageQueue.length),t=0;t<e;t++)for(var n=r._messageQueue.pop(),o=0,i=this._subscriberMap[n.identifier];o<i.length;o++)i[o].receiveMessage(n)},r._subscriberMap={},r._normalMessageCapacity=10,r._messageQueue=[],r}();const o=r.p+"2ce6ec3185da49acbad2ebe2f2133042.jpg";var i,a,s,c,u,l,d;const f=function(){function e(e){var r=this;if(null==(a=e))throw new Error("Canvas initialization failed!");if(void 0===(i=a.getContext("webgl2")))throw new Error("Unable to initiaze WebGL");n.addSubscription("CLICK",this);var t=new Image;t.onload=function(e){console.log("image loaded!"),r.init(t)},t.onerror=function(e){console.log(e)},t.src=o}return e.prototype.receiveMessage=function(e){console.log("Renderer received "+e.identifier)},Object.defineProperty(e.prototype,"getRenderer",{get:function(){return this},enumerable:!1,configurable:!0}),e.prototype.init=function(r){var t=e.createShader(i,i.VERTEX_SHADER,"#version 300 es\n \n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nlayout(location=0) in vec3 a_position;\nlayout(location=1) in vec3 a_color;\nlayout(location=2) in vec2 a_texCoord;\n\nout vec3 color;\nout vec2 texCoord;\n\n\nvoid main() {\n\n  gl_Position = vec4(a_position,1.0);\n  color=a_color;\n  texCoord=a_texCoord;\n}\n"),n=e.createShader(i,i.FRAGMENT_SHADER,"#version 300 es\n \nprecision highp float;\n\nout vec4 FragColor;\n\nin vec3 color;\nin vec2 texCoord;\n\nuniform sampler2D u_texture;\n\n\nvoid main() {\n  //Look up colour from texture\n  FragColor=texture(u_texture, texCoord);\n}\n");if(s=e.createProgram(i,t,n),i.useProgram(s),null==s)throw new Error("Program creation failed!");i.deleteShader(t),i.deleteShader(n),e.resizeCanvasToDisplaySize(a),i.getAttribLocation(s,"a_position"),i.getAttribLocation(s,"a_texCoord"),d=new Uint16Array([0,1,3,1,2,3]),c=i.createVertexArray(),i.bindVertexArray(c);var o=i.createBuffer();i.bindBuffer(i.ARRAY_BUFFER,o),i.bufferData(i.ARRAY_BUFFER,new Float32Array([.5,.5,0,1,0,0,1,1,.5,-.5,0,0,1,0,1,0,-.5,-.5,0,0,0,1,0,0,-.5,.5,0,1,1,0,0,1]),i.STATIC_DRAW),l=i.createBuffer(),i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,l),i.bufferData(i.ELEMENT_ARRAY_BUFFER,d,i.STATIC_DRAW),console.log(i.getBufferParameter(i.ARRAY_BUFFER,i.BUFFER_SIZE)),console.log(i.getBufferParameter(i.ELEMENT_ARRAY_BUFFER,i.BUFFER_SIZE)),i.vertexAttribPointer(0,3,i.FLOAT,!1,32,0),i.enableVertexAttribArray(0),i.vertexAttribPointer(1,3,i.FLOAT,!1,32,12),i.enableVertexAttribArray(1),i.vertexAttribPointer(2,2,i.FLOAT,!1,32,24),i.enableVertexAttribArray(2),u=i.createTexture(),i.bindTexture(i.TEXTURE_2D,u),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.REPEAT),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.REPEAT),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.LINEAR_MIPMAP_LINEAR),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.LINEAR);var f=i.TEXTURE_2D,p=i.RGBA,g=i.RGBA,E=i.UNSIGNED_BYTE;i.texImage2D(f,0,p,g,E,r),i.generateMipmap(i.TEXTURE_2D),this.render()},e.prototype.render=function(){e.resizeCanvasToDisplaySize(a),i.viewport(0,0,i.canvas.width,i.canvas.height),i.clear(i.COLOR_BUFFER_BIT),i.clearColor(0,0,0,1),i.useProgram(s),i.bindTexture(i.TEXTURE_2D,u),i.bindVertexArray(c);var r=i.TRIANGLES,t=i.UNSIGNED_SHORT;i.drawElements(r,6,t,0)},e.createShader=function(e,r,t){var n=e.createShader(r);if(e.shaderSource(n,t),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS))return console.log(e.getShaderInfoLog(n)),n;console.log(e.getShaderInfoLog(n)),e.deleteShader(n)},e.createProgram=function(e,r,t){var n=e.createProgram();if(e.attachShader(n,r),e.attachShader(n,t),e.linkProgram(n),e.getProgramParameter(n,e.LINK_STATUS))return n;console.log(e.getProgramInfoLog(n)),e.deleteProgram(n)},e.resizeCanvasToDisplaySize=function(e){var r=e.clientWidth,t=e.clientHeight;(e.width!==r||e.height!==t)&&(e.width=r,e.height=t)},e}(),p=function(){function e(e,r){this.targetElement=e,this.renderer=r}return e.prototype.receiveMessage=function(e){},e.prototype.update=function(){},e.prototype.onKeyDown=function(e){"ArrowUp"===e.key&&console.log("UP!")},e.prototype.initInputEvents=function(){var e=this;this.targetElement.onmousemove=function(e){},this.targetElement.onmousedown=function(r){console.log("X:"+r.pageX+" Y:"+r.pageY),n.post(new t("CLICK",e))}},e}();var g=function(){function e(e){if(void 0===e&&(e="vertigoCanvas"),this._canvas=document.getElementById(e),void 0===this._canvas)throw new Error("FATAL: Cannot find destination canvas element with name:"+e)}return e.prototype.initialize=function(){this._renderer=new f(this._canvas),new p(this._canvas,this._renderer).initInputEvents(),this.run()},e.sendInputMessage=function(e){},e.prototype.run=function(){var e=function(){n.update(),window.requestAnimationFrame(e)};window.requestAnimationFrame(e)},e}();window.onload=function(){(new g).initialize()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,