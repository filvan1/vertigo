(()=>{"use strict";var e;!function(e){e[e.NORMAL=0]="NORMAL",e[e.HIGH=1]="HIGH"}(e||(e={}));var n,t,r=function(n,t,r,i){void 0===i&&(i=e.NORMAL),this.identifier=n,this.sender=t,this.payload=r,this.priority=i},i=function(){function n(){}return n.addSubscription=function(e,t){var r=n._subscriberMap[e];void 0===r&&(n._subscriberMap[e]=[],r=[]),-1!==r.indexOf(t)?console.warn(t+" already exists in sub map with key "+e):n._subscriberMap[e].push(t)},n.removeSubscription=function(e,t){var r=n._subscriberMap[e];if(void 0!==r){var i=r.indexOf(t);-1!==i&&n._subscriberMap[e].splice(i,1)}else console.warn(t+" not subscribed to "+e)},n.post=function(t){var r=n._subscriberMap[t.identifier];if(void 0!==r)for(var i=0,o=r;i<o.length;i++){var a=o[i];t.priority==e.HIGH?a.receiveMessage(t):n._messageQueue.push(t)}else console.log("Message "+t+" not posted: No subscribers ")},n.update=function(){if(0!==n._messageQueue.length)for(var e=Math.min(n._normalMessageCapacity,n._messageQueue.length),t=0;t<e;t++)for(var r=n._messageQueue.pop(),i=0,o=this._subscriberMap[r.identifier];i<o.length;i++)o[i].receiveMessage(r)},n._subscriberMap={},n._normalMessageCapacity=10,n._messageQueue=[],n}();const o=function(){function e(e){if(null==(t=e))throw new Error("Canvas initialization failed!");if(void 0===(n=t.getContext("webgl2")))throw new Error("Unable to initiaze WebGL");i.addSubscription("CLICK",this)}return e.prototype.receiveMessage=function(e){console.log("Renderer received "+e.identifier)},Object.defineProperty(e.prototype,"getRenderer",{get:function(){return this},enumerable:!1,configurable:!0}),e.prototype.init=function(){var r=e.createShader(n,n.VERTEX_SHADER,"#version 300 es\n \n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nin vec4 a_position;\n\nuniform mat4 u_projection;\nuniform mat4 u_translation;\n\n// all shaders have a main function\nvoid main() {\n\n  // gl_Position is a special variable a vertex shader\n  // is responsible for setting\n  gl_Position = a_position;\n}\n"),i=e.createShader(n,n.FRAGMENT_SHADER,'#version 300 es\n \n// fragment shaders don\'t have a default precision so we need\n// to pick one. highp is a good default. It means "high precision"\nprecision highp float;\n \n// we need to declare an output for the fragment shader\nout vec4 outColor;\n \nvoid main() {\n  // Just set the output to a constant reddish-purple\n  outColor = vec4(1, 0, 0.5, 1);\n}\n'),o=e.createProgram(n,r,i);if(n.useProgram(o),null==o)throw new Error("Program creation failed!");var a=n.getAttribLocation(o,"a_position"),s=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,s),n.bufferData(n.ARRAY_BUFFER,new Float32Array([0,0,0,.5,.7,0]),n.STATIC_DRAW);var u=n.createVertexArray();n.bindVertexArray(u),n.enableVertexAttribArray(a);var c=n.FLOAT,d=0;n.vertexAttribPointer(a,2,c,!1,0,d),e.resizeCanvasToDisplaySize(t),n.viewport(0,0,n.canvas.width,n.canvas.height),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT);var f=n.TRIANGLES;d=0,n.drawArrays(f,d,3)},e.createShader=function(e,n,t){var r=e.createShader(n);if(e.shaderSource(r,t),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;console.log(e.getShaderInfoLog(r)),e.deleteShader(r)},e.createProgram=function(e,n,t){var r=e.createProgram();if(e.attachShader(r,n),e.attachShader(r,t),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;console.log(e.getProgramInfoLog(r)),e.deleteProgram(r)},e.resizeCanvasToDisplaySize=function(e){var n=e.clientWidth,t=e.clientHeight;(e.width!==n||e.height!==t)&&(e.width=n,e.height=t)},e}(),a=function(){function e(e,n){this.targetElement=e,this.renderer=n}return e.prototype.receiveMessage=function(e){},e.prototype.update=function(){},e.prototype.onKeyDown=function(e){"ArrowUp"===e.key&&console.log("UP!")},e.prototype.initInputEvents=function(){var e=this;this.targetElement.onmousemove=function(e){},this.targetElement.onmousedown=function(n){console.log("X:"+n.pageX+" Y:"+n.pageY),i.post(new r("CLICK",e))}},e}();var s=function(){function e(e){if(void 0===e&&(e="vertigoCanvas"),this._canvas=document.getElementById(e),void 0===this._canvas)throw new Error("FATAL: Cannot find destination canvas element with name:"+e)}return e.prototype.initialize=function(){this._renderer=new o(this._canvas),this._renderer.init(),new a(this._canvas,this._renderer).initInputEvents(),this.run()},e.sendInputMessage=function(e){},e.prototype.run=function(){var e=function(){i.update(),window.requestAnimationFrame(e)};window.requestAnimationFrame(e)},e}();window.onload=function(){(new s).initialize()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,