(()=>{"use strict";var e,n;const t=function(){function t(t){if(null==(n=t))throw new Error("Canvas initialization failed!");if(void 0===(e=n.getContext("webgl2")))throw new Error("Unable to initiaze WebGL")}return t.prototype.init=function(){var r=t.createShader(e,e.VERTEX_SHADER,"#version 300 es\n \n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nin vec4 a_position;\n\nuniform mat4 u_projection;\nuniform mat4 u_translation;\n\n// all shaders have a main function\nvoid main() {\n\n  // gl_Position is a special variable a vertex shader\n  // is responsible for setting\n  gl_Position = a_position;\n}\n"),a=t.createShader(e,e.FRAGMENT_SHADER,'#version 300 es\n \n// fragment shaders don\'t have a default precision so we need\n// to pick one. highp is a good default. It means "high precision"\nprecision highp float;\n \n// we need to declare an output for the fragment shader\nout vec4 outColor;\n \nvoid main() {\n  // Just set the output to a constant reddish-purple\n  outColor = vec4(1, 0, 0.5, 1);\n}\n'),o=t.createProgram(e,r,a);if(e.useProgram(o),null==o)throw new Error("Program creation failed!");var i=e.getAttribLocation(o,"a_position"),s=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,s),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,0,.5,.7,0]),e.STATIC_DRAW);var c=e.createVertexArray();e.bindVertexArray(c),e.enableVertexAttribArray(i);var d=e.FLOAT,l=0;e.vertexAttribPointer(i,2,d,!1,0,l),t.resizeCanvasToDisplaySize(n),e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT);var h=e.TRIANGLES;l=0,e.drawArrays(h,l,3)},t.createShader=function(e,n,t){var r=e.createShader(n);if(e.shaderSource(r,t),e.compileShader(r),e.getShaderParameter(r,e.COMPILE_STATUS))return r;console.log(e.getShaderInfoLog(r)),e.deleteShader(r)},t.createProgram=function(e,n,t){var r=e.createProgram();if(e.attachShader(r,n),e.attachShader(r,t),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS))return r;console.log(e.getProgramInfoLog(r)),e.deleteProgram(r)},t.resizeCanvasToDisplaySize=function(e){var n=e.clientWidth,t=e.clientHeight;(e.width!==n||e.height!==t)&&(e.width=n,e.height=t)},t}(),r=function(){function e(e){this.bodyElement=e,this.bodyElement.addEventListener("keydown",this.onKeyDown,!1)}return e.prototype.onKeyDown=function(e){"ArrowUp"===e.key&&console.log("UP!")},e}();var a="vertigoCanvas",o=function(){function e(){}return e.prototype.initialize=function(){var e=document.getElementById(a);if(void 0===e)throw new Error("Cannot find destination canvas element with name:"+a);new t(e).init(),new r(document.body)},e}();window.onload=function(){(new o).initialize()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,