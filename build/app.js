(()=>{"use strict";var e,t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var r=t.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),function(e){e[e.NORMAL=0]="NORMAL",e[e.HIGH=1]="HIGH"}(e||(e={}));var r=function(t,r,n,i){void 0===i&&(i=e.NORMAL),this.identifier=t,this.sender=r,this.payload=n,this.priority=i},n=function(){function t(){this._subscriberMap={},this._normalMessageCapacity=10,this._messageQueue=[]}return t.getInstance=function(){return null==t._instance&&(t._instance=new t),t._instance},t.prototype.addSubscription=function(e,t){var r=this._subscriberMap[e];void 0===r&&(this._subscriberMap[e]=[],r=[]),-1!==r.indexOf(t)?console.warn(t+" already exists in sub map with key "+e):this._subscriberMap[e].push(t)},t.prototype.removeSubscription=function(e,t){var r=this._subscriberMap[e];if(void 0!==r){var n=r.indexOf(t);-1!==n&&this._subscriberMap[e].splice(n,1)}else console.warn(t+" not subscribed to "+e)},t.prototype.post=function(t){var r=this._subscriberMap[t.identifier];if(void 0!==r)for(var n=0,i=r;n<i.length;n++){var a=i[n];t.priority==e.HIGH?a.receiveMessage(t):this._messageQueue.push(t)}else console.log("Message "+t.identifier+" not posted: No subscribers ")},t.prototype.update=function(){if(0!==this._messageQueue.length)for(var e=Math.min(this._normalMessageCapacity,this._messageQueue.length),t=0;t<e;t++)for(var r=this._messageQueue.pop(),n=0,i=this._subscriberMap[r.identifier];n<i.length;n++)i[n].receiveMessage(r)},t}();const i=t.p+"2ce6ec3185da49acbad2ebe2f2133042.jpg";var a=1e-6,o="undefined"!=typeof Float32Array?Float32Array:Array;Math.random;var s=Math.PI/180;function u(e){return e*s}function c(){var e=new o(3);return o!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function h(e,t,r){var n=new o(3);return n[0]=e,n[1]=t,n[2]=r,n}function f(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e}function p(e,t,r){var n=t[0],i=t[1],a=t[2],o=r[0],s=r[1],u=r[2];return e[0]=i*u-a*s,e[1]=a*o-n*u,e[2]=n*s-i*o,e}function l(){var e=new o(16);return o!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function d(e,t,r,n){var i,o,s,u,c,h,f,p,l,d,g,m,v,_,E,b,T,w,A,R,M,y,S,P,I=n[0],U=n[1],B=n[2],F=Math.hypot(I,U,B);return F<a?null:(I*=F=1/F,U*=F,B*=F,i=Math.sin(r),s=1-(o=Math.cos(r)),u=t[0],c=t[1],h=t[2],f=t[3],p=t[4],l=t[5],d=t[6],g=t[7],m=t[8],v=t[9],_=t[10],E=t[11],b=I*I*s+o,T=U*I*s+B*i,w=B*I*s-U*i,A=I*U*s-B*i,R=U*U*s+o,M=B*U*s+I*i,y=I*B*s+U*i,S=U*B*s-I*i,P=B*B*s+o,e[0]=u*b+p*T+m*w,e[1]=c*b+l*T+v*w,e[2]=h*b+d*T+_*w,e[3]=f*b+g*T+E*w,e[4]=u*A+p*R+m*M,e[5]=c*A+l*R+v*M,e[6]=h*A+d*R+_*M,e[7]=f*A+g*R+E*M,e[8]=u*y+p*S+m*P,e[9]=c*y+l*S+v*P,e[10]=h*y+d*S+_*P,e[11]=f*y+g*S+E*P,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)}),c();var g=function(e,t,r,n,i){var a,o=1/Math.tan(t/2);return e[0]=o/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=-1,e[12]=0,e[13]=0,e[15]=0,null!=i&&i!==1/0?(a=1/(n-i),e[10]=(i+n)*a,e[14]=2*i*n*a):(e[10]=-1,e[14]=-2*n),e};function m(e,t,r,n){var i,o,s,u,c,h,f,p,l,d,g=t[0],m=t[1],v=t[2],_=n[0],E=n[1],b=n[2],T=r[0],w=r[1],A=r[2];return Math.abs(g-T)<a&&Math.abs(m-w)<a&&Math.abs(v-A)<a?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(f=g-T,p=m-w,l=v-A,i=E*(l*=d=1/Math.hypot(f,p,l))-b*(p*=d),o=b*(f*=d)-_*l,s=_*p-E*f,(d=Math.hypot(i,o,s))?(i*=d=1/d,o*=d,s*=d):(i=0,o=0,s=0),u=p*s-l*o,c=l*i-f*s,h=f*o-p*i,(d=Math.hypot(u,c,h))?(u*=d=1/d,c*=d,h*=d):(u=0,c=0,h=0),e[0]=i,e[1]=u,e[2]=f,e[3]=0,e[4]=o,e[5]=c,e[6]=p,e[7]=0,e[8]=s,e[9]=h,e[10]=l,e[11]=0,e[12]=-(i*g+o*m+s*v),e[13]=-(u*g+c*m+h*v),e[14]=-(f*g+p*m+l*v),e[15]=1,e)}var v,_,E,b,T,w,A,R,M,y,S,P,I,U,B="INPUT_KEY_DOWN",F="INPUT_KEY_UP",x="INPUT_MOUSE_DOWN",L="INPUT_MOUSE_UP",D="INPUT_MOUSE_MOVE",N=.1*Math.PI/180,C=45,k=-90,O=0,H=!1,X=0,G=0,Y=!1,z=!1,W=!1,j=!1,q=!1,V=!1;const Q=function(){function e(e){var t=this;if(this.messageBus=n.getInstance(),null==(_=e))throw new Error("Canvas initialization failed!");if(void 0===(v=_.getContext("webgl2")))throw new Error("Unable to initiaze WebGL");this.messageBus.addSubscription(B,this),this.messageBus.addSubscription(F,this),this.messageBus.addSubscription(x,this),this.messageBus.addSubscription(L,this);var a=new Image;a.onload=function(e){t.init(a),t.messageBus.post(new r("renderer_started",t))},a.onerror=function(e){console.log(e)},a.src=i}return e.prototype.receiveMessage=function(e){var t=e.identifier,r=e.payload;if(t==B)switch(r){case"w":Y=!0;break;case"a":z=!0;break;case"s":W=!0;break;case"d":j=!0;break;case"e":q=!0;break;case"q":V=!0}else if(t==F)switch(r){case"w":Y=!1;break;case"a":z=!1;break;case"s":W=!1;break;case"d":j=!1;break;case"e":q=!1;break;case"q":V=!1}t==x?(this.messageBus.addSubscription(D,this),H=!0,Z(r)):t==L&&this.messageBus.removeSubscription(D,this),t==D&&Z(r)},Object.defineProperty(e.prototype,"getRenderer",{get:function(){return this},enumerable:!1,configurable:!0}),e.prototype.init=function(t){var r=e.createShader(v,v.VERTEX_SHADER,"#version 300 es\n\n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nlayout(location=0)in vec3 a_position;\nlayout(location=1)in vec2 a_texCoord;\n\nout vec2 texCoord;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main(){\n  \n  gl_Position=projection*view*model*vec4(a_position,1.);\n  texCoord=a_texCoord;\n}\n"),n=e.createShader(v,v.FRAGMENT_SHADER,"#version 300 es\n \nprecision highp float;\n\nout vec4 FragColor;\n\nin vec2 texCoord;\n\nuniform sampler2D u_texture;\n\n\nvoid main() {\n  //Look up colour from texture\n  FragColor=texture(u_texture, texCoord);\n}\n"),i=e.createShader(v,v.VERTEX_SHADER,"#version 300 es\nin vec4 a_position;\nin vec3 a_normal;\n\nuniform mat4 u_projection;\nuniform mat4 u_view;\nuniform mat4 u_world;\n\nout vec3 v_normal;\n\nvoid main(){\n    gl_Position=u_projection*u_view*u_world*a_position;\n    v_normal=mat3(u_world)*a_normal;\n}"),a=e.createShader(v,v.FRAGMENT_SHADER,"#version 300 es\n  precision highp float;\n \n  in vec3 v_normal;\n \n  uniform vec4 u_diffuse;\n  uniform vec3 u_lightDirection;\n \n  out vec4 outColor;\n \n  void main () {\n    vec3 normal = normalize(v_normal);\n    float fakeLight = dot(u_lightDirection, normal) * .5 + .5;\n    outColor = vec4(u_diffuse.rgb * fakeLight, u_diffuse.a);\n  }");if(e.createProgram(v,i,a),E=e.createProgram(v,r,n),v.useProgram(E),null==E)throw new Error("Program creation failed!");e.resizeCanvasToDisplaySize(_),S=h(0,0,3),U=h(0,0,-1),P=h(0,1,0),I=c,A=new Uint16Array([0,1,3,1,2,3]),R=d(R=l(),R,u(-55),h(1,0,0)),M=m(M=l(),h(0,0,3),h(0,0,0),h(0,1,0)),C=v.canvas.clientHeight*N,y=l(),y=g(y,C,_.clientWidth/_.clientHeight,.1,100),b=v.createVertexArray(),v.bindVertexArray(b);var o=v.createBuffer();v.bindBuffer(v.ARRAY_BUFFER,o),v.bufferData(v.ARRAY_BUFFER,new Float32Array([-.5,-.5,-.5,0,0,.5,-.5,-.5,1,0,.5,.5,-.5,1,1,.5,.5,-.5,1,1,-.5,.5,-.5,0,1,-.5,-.5,-.5,0,0,-.5,-.5,.5,0,0,.5,-.5,.5,1,0,.5,.5,.5,1,1,.5,.5,.5,1,1,-.5,.5,.5,0,1,-.5,-.5,.5,0,0,-.5,.5,.5,1,0,-.5,.5,-.5,1,1,-.5,-.5,-.5,0,1,-.5,-.5,-.5,0,1,-.5,-.5,.5,0,0,-.5,.5,.5,1,0,.5,.5,.5,1,0,.5,.5,-.5,1,1,.5,-.5,-.5,0,1,.5,-.5,-.5,0,1,.5,-.5,.5,0,0,.5,.5,.5,1,0,-.5,-.5,-.5,0,1,.5,-.5,-.5,1,1,.5,-.5,.5,1,0,.5,-.5,.5,1,0,-.5,-.5,.5,0,0,-.5,-.5,-.5,0,1,-.5,.5,-.5,0,1,.5,.5,-.5,1,1,.5,.5,.5,1,0,.5,.5,.5,1,0,-.5,.5,.5,0,0,-.5,.5,-.5,0,1]),v.STATIC_DRAW),w=v.createBuffer(),v.bindBuffer(v.ELEMENT_ARRAY_BUFFER,w),v.bufferData(v.ELEMENT_ARRAY_BUFFER,A,v.STATIC_DRAW),console.log(v.getBufferParameter(v.ARRAY_BUFFER,v.BUFFER_SIZE)),console.log(v.getBufferParameter(v.ELEMENT_ARRAY_BUFFER,v.BUFFER_SIZE)),v.vertexAttribPointer(0,3,v.FLOAT,!1,20,0),v.enableVertexAttribArray(0),v.vertexAttribPointer(1,2,v.FLOAT,!1,20,12),v.enableVertexAttribArray(1),T=v.createTexture(),v.bindTexture(v.TEXTURE_2D,T),v.texParameteri(v.TEXTURE_2D,v.TEXTURE_WRAP_S,v.REPEAT),v.texParameteri(v.TEXTURE_2D,v.TEXTURE_WRAP_T,v.REPEAT),v.texParameteri(v.TEXTURE_2D,v.TEXTURE_MIN_FILTER,v.LINEAR_MIPMAP_LINEAR),v.texParameteri(v.TEXTURE_2D,v.TEXTURE_MAG_FILTER,v.LINEAR);var s=v.TEXTURE_2D,f=v.RGBA,p=v.RGBA,B=v.UNSIGNED_BYTE;v.texImage2D(s,0,f,p,B,t),v.generateMipmap(v.TEXTURE_2D),v.enable(v.DEPTH_TEST),this.render()},e.prototype.render=function(){var t=Date.now();X=t-G,G=t,this.processInput(),e.resizeCanvasToDisplaySize(_)&&(y=g(y,C,_.clientWidth/_.clientHeight,.1,100)),v.viewport(0,0,v.canvas.width,v.canvas.height),v.clear(v.COLOR_BUFFER_BIT|v.DEPTH_BUFFER_BIT),v.clearColor(0,0,0,1),v.useProgram(E),v.bindTexture(v.TEXTURE_2D,T),v.bindVertexArray(b),R=d(R,R,u(-.5),h(1,1,.5));var r=h(0,0,0);!function(e,t,r){e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2]}(r,S,U),m(M,S,r,P);var n=v.getUniformLocation(E,"model"),i=v.getUniformLocation(E,"view"),a=v.getUniformLocation(E,"projection");v.uniformMatrix4fv(n,!1,R),v.uniformMatrix4fv(i,!1,M),v.uniformMatrix4fv(a,!1,y),v.TRIANGLES,v.UNSIGNED_SHORT,v.drawArrays(v.TRIANGLES,0,36)},e.createShader=function(e,t,r){var n=e.createShader(t);if(e.shaderSource(n,r),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS))return console.log(e.getShaderInfoLog(n)),n;console.log(e.getShaderInfoLog(n)),e.deleteShader(n)},e.createProgram=function(e,t,r){var n=e.createProgram();if(e.attachShader(n,t),e.attachShader(n,r),e.linkProgram(n),e.getProgramParameter(n,e.LINK_STATUS))return n;console.log(e.getProgramInfoLog(n)),e.deleteProgram(n)},e.resizeCanvasToDisplaySize=function(e){var t=e.clientWidth,r=e.clientHeight,n=e.width!==t||e.height!==r;return n&&(e.width=t,e.height=r),n},e.prototype.processInput=function(){var e=.005*X;Y&&f(S,S,U,e),z&&(p(I,U,P),f(S,S,I,-e)),W&&f(S,S,U,-e),j&&(p(I,U,P),f(S,S,I,e)),q&&(p(I,U,P),f(S,S,P,e)),V&&(p(I,U,P),f(S,S,P,-e))},e}();var K,$;function Z(e){H&&(K=e[0],$=e[1],H=!1);var t=e[0]-K,r=$-e[1];K=e[0],$=e[1],k+=t*=.1;var n=u(O=(O=(O+=r*=.1)>89?89:O)<-89?-89:O),i=u(k),a=h(Math.cos(i)*Math.cos(n),Math.sin(n),Math.sin(i)*Math.cos(n));!function(e,t){var r=t[0],n=t[1],i=t[2],a=r*r+n*n+i*i;a>0&&(a=1/Math.sqrt(a)),e[0]=t[0]*a,e[1]=t[1]*a,e[2]=t[2]*a}(U,a)}const J=function(){function e(e,t){this.targetElement=e,this.renderer=t,this.messageBus=n.getInstance()}return e.prototype.receiveMessage=function(e){},e.prototype.update=function(){},e.prototype.initInputEvents=function(){var e=this;this.targetElement.tabIndex=1e3,this.targetElement.onkeydown=function(t){if(!t.repeat){var n=t.key;e.messageBus.post(new r(B,e,n))}},this.targetElement.onkeyup=function(t){if(!t.repeat){var n=t.key;e.messageBus.post(new r(F,e,n))}},this.targetElement.onmousedown=function(t){e.messageBus.post(new r(x,e,[t.pageX,t.pageY]))},this.targetElement.onmouseup=function(t){e.messageBus.post(new r(L,e,[t.pageX,t.pageY]))},this.targetElement.onmousemove=function(t){e.messageBus.post(new r(D,e,[t.pageX,t.pageY]))}},e.prototype.requestPointerLock=function(){this.targetElement.requestPointerLock()},e.prototype.exitPointerLock=function(){document.exitPointerLock()},e}();var ee=function(){function e(e){if(void 0===e&&(e="vertigoCanvas"),this._render=!1,this._canvas=document.getElementById(e),void 0===this._canvas)throw new Error("FATAL: Cannot find destination canvas element with name:"+e)}return e.prototype.receiveMessage=function(e){console.log("engine received "+e.identifier),this._render=!0},e.prototype.initialize=function(){this._messageBus=n.getInstance(),this._messageBus.addSubscription("renderer_started",this),this._renderer=new Q(this._canvas),new J(this._canvas,this._renderer).initInputEvents(),this.run()},e.sendInputMessage=function(e){},e.prototype.run=function(){var e=this,t=function(){e._messageBus.update(),e._render&&e._renderer.render(),window.requestAnimationFrame(t)};window.requestAnimationFrame(t)},e}();window.onload=function(){(new ee).initialize()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,