(()=>{"use strict";var e,t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var r=t.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var n=r.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),function(e){e[e.NORMAL=0]="NORMAL",e[e.HIGH=1]="HIGH"}(e||(e={}));var r=function(t,r,n,i){void 0===i&&(i=e.NORMAL),this.identifier=t,this.sender=r,this.payload=n,this.priority=i},n=function(){function t(){this._subscriberMap={},this._normalMessageCapacity=10,this._messageQueue=[]}return t.getInstance=function(){return null==t._instance&&(t._instance=new t),t._instance},t.prototype.addSubscription=function(e,t){var r=this._subscriberMap[e];void 0===r&&(this._subscriberMap[e]=[],r=[]),-1!==r.indexOf(t)?console.warn(t+" already exists in sub map with key "+e):this._subscriberMap[e].push(t)},t.prototype.removeSubscription=function(e,t){var r=this._subscriberMap[e];if(void 0!==r){var n=r.indexOf(t);-1!==n&&this._subscriberMap[e].splice(n,1)}else console.warn(t+" not subscribed to "+e)},t.prototype.post=function(t){var r=this._subscriberMap[t.identifier];if(void 0!==r)for(var n=0,i=r;n<i.length;n++){var a=i[n];t.priority==e.HIGH?a.receiveMessage(t):this._messageQueue.push(t)}else console.log("Message "+t.identifier+" not posted: No subscribers ")},t.prototype.update=function(){if(0!==this._messageQueue.length)for(var e=Math.min(this._normalMessageCapacity,this._messageQueue.length),t=0;t<e;t++)for(var r=this._messageQueue.pop(),n=0,i=this._subscriberMap[r.identifier];n<i.length;n++)i[n].receiveMessage(r)},t}();const i=t.p+"2ce6ec3185da49acbad2ebe2f2133042.jpg";var a=1e-6,o="undefined"!=typeof Float32Array?Float32Array:Array;Math.random;var s=Math.PI/180;function u(e){return e*s}function c(){var e=new o(3);return o!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function h(e,t,r){var n=new o(3);return n[0]=e,n[1]=t,n[2]=r,n}function p(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e}function f(e,t,r){var n=t[0],i=t[1],a=t[2],o=r[0],s=r[1],u=r[2];return e[0]=i*u-a*s,e[1]=a*o-n*u,e[2]=n*s-i*o,e}function d(){var e=new o(16);return o!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function g(e,t,r,n){var i,o,s,u,c,h,p,f,d,g,l,m,v,_,E,b,T,A,y,w,M,R,S,I,P=n[0],U=n[1],B=n[2],x=Math.hypot(P,U,B);return x<a?null:(P*=x=1/x,U*=x,B*=x,i=Math.sin(r),s=1-(o=Math.cos(r)),u=t[0],c=t[1],h=t[2],p=t[3],f=t[4],d=t[5],g=t[6],l=t[7],m=t[8],v=t[9],_=t[10],E=t[11],b=P*P*s+o,T=U*P*s+B*i,A=B*P*s-U*i,y=P*U*s-B*i,w=U*U*s+o,M=B*U*s+P*i,R=P*B*s+U*i,S=U*B*s-P*i,I=B*B*s+o,e[0]=u*b+f*T+m*A,e[1]=c*b+d*T+v*A,e[2]=h*b+g*T+_*A,e[3]=p*b+l*T+E*A,e[4]=u*y+f*w+m*M,e[5]=c*y+d*w+v*M,e[6]=h*y+g*w+_*M,e[7]=p*y+l*w+E*M,e[8]=u*R+f*S+m*I,e[9]=c*R+d*S+v*I,e[10]=h*R+g*S+_*I,e[11]=p*R+l*S+E*I,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)}),c();function l(e,t,r,n){var i,o,s,u,c,h,p,f,d,g,l=t[0],m=t[1],v=t[2],_=n[0],E=n[1],b=n[2],T=r[0],A=r[1],y=r[2];return Math.abs(l-T)<a&&Math.abs(m-A)<a&&Math.abs(v-y)<a?function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}(e):(p=l-T,f=m-A,d=v-y,i=E*(d*=g=1/Math.hypot(p,f,d))-b*(f*=g),o=b*(p*=g)-_*d,s=_*f-E*p,(g=Math.hypot(i,o,s))?(i*=g=1/g,o*=g,s*=g):(i=0,o=0,s=0),u=f*s-d*o,c=d*i-p*s,h=p*o-f*i,(g=Math.hypot(u,c,h))?(u*=g=1/g,c*=g,h*=g):(u=0,c=0,h=0),e[0]=i,e[1]=u,e[2]=p,e[3]=0,e[4]=o,e[5]=c,e[6]=f,e[7]=0,e[8]=s,e[9]=h,e[10]=d,e[11]=0,e[12]=-(i*l+o*m+s*v),e[13]=-(u*l+c*m+h*v),e[14]=-(p*l+f*m+d*v),e[15]=1,e)}var m,v,_,E,b,T,A,y,w,M,R,S,I,P,U="INPUT_KEY_DOWN",B="INPUT_KEY_UP",x="INPUT_MOUSE_DOWN",F="INPUT_MOUSE_UP",L="INPUT_MOUSE_MOVE",N=-90,D=0,C=!1,X=0,O=0,k=!1,Y=!1,G=!1,H=!1;const z=function(){function e(e){var t=this;if(this.messageBus=n.getInstance(),null==(v=e))throw new Error("Canvas initialization failed!");if(void 0===(m=v.getContext("webgl2")))throw new Error("Unable to initiaze WebGL");this.messageBus.addSubscription(U,this),this.messageBus.addSubscription(B,this),this.messageBus.addSubscription(x,this),this.messageBus.addSubscription(F,this);var a=new Image;a.onload=function(e){t.init(a),t.messageBus.post(new r("renderer_started",t))},a.onerror=function(e){console.log(e)},a.src=i}return e.prototype.receiveMessage=function(e){var t=e.identifier,r=e.payload;if(t==U)switch(r){case"w":k=!0;break;case"a":Y=!0;break;case"s":G=!0;break;case"d":H=!0}else if(t==B)switch(r){case"w":k=!1;break;case"a":Y=!1;break;case"s":G=!1;break;case"d":H=!1}t==x?(this.messageBus.addSubscription(L,this),C=!0,V(r)):t==F&&this.messageBus.removeSubscription(L,this),t==L&&V(r)},Object.defineProperty(e.prototype,"getRenderer",{get:function(){return this},enumerable:!1,configurable:!0}),e.prototype.init=function(t){var r,n,i,a,o,s,p,f=e.createShader(m,m.VERTEX_SHADER,"#version 300 es\n\n// an attribute is an input (in) to a vertex shader.\n// It will receive data from a buffer\nlayout(location=0)in vec3 a_position;\nlayout(location=1)in vec2 a_texCoord;\n\nout vec2 texCoord;\n\nuniform mat4 model;\nuniform mat4 view;\nuniform mat4 projection;\n\nvoid main(){\n  \n  gl_Position=projection*view*model*vec4(a_position,1.);\n  texCoord=a_texCoord;\n}\n"),U=e.createShader(m,m.FRAGMENT_SHADER,"#version 300 es\n \nprecision highp float;\n\nout vec4 FragColor;\n\nin vec2 texCoord;\n\nuniform sampler2D u_texture;\n\n\nvoid main() {\n  //Look up colour from texture\n  FragColor=texture(u_texture, texCoord);\n}\n");if(_=e.createProgram(m,f,U),m.useProgram(_),null==_)throw new Error("Program creation failed!");m.deleteShader(f),m.deleteShader(U),e.resizeCanvasToDisplaySize(v),R=h(0,0,3),P=h(0,0,-1),S=h(0,1,0),I=c,A=new Uint16Array([0,1,3,1,2,3]),y=g(y=d(),y,u(-55),h(1,0,0)),w=l(w=d(),h(0,0,3),h(0,0,0),h(0,1,0)),M=d(),r=M,n=u(45),i=800/600,a=.1,o=100,p=1/Math.tan(n/2),r[0]=p/i,r[1]=0,r[2]=0,r[3]=0,r[4]=0,r[5]=p,r[6]=0,r[7]=0,r[8]=0,r[9]=0,r[11]=-1,r[12]=0,r[13]=0,r[15]=0,null!=o&&o!==1/0?(s=1/(a-o),r[10]=(o+a)*s,r[14]=2*o*a*s):(r[10]=-1,r[14]=-2*a),M=r,E=m.createVertexArray(),m.bindVertexArray(E);var B=m.createBuffer();m.bindBuffer(m.ARRAY_BUFFER,B),m.bufferData(m.ARRAY_BUFFER,new Float32Array([-.5,-.5,-.5,0,0,.5,-.5,-.5,1,0,.5,.5,-.5,1,1,.5,.5,-.5,1,1,-.5,.5,-.5,0,1,-.5,-.5,-.5,0,0,-.5,-.5,.5,0,0,.5,-.5,.5,1,0,.5,.5,.5,1,1,.5,.5,.5,1,1,-.5,.5,.5,0,1,-.5,-.5,.5,0,0,-.5,.5,.5,1,0,-.5,.5,-.5,1,1,-.5,-.5,-.5,0,1,-.5,-.5,-.5,0,1,-.5,-.5,.5,0,0,-.5,.5,.5,1,0,.5,.5,.5,1,0,.5,.5,-.5,1,1,.5,-.5,-.5,0,1,.5,-.5,-.5,0,1,.5,-.5,.5,0,0,.5,.5,.5,1,0,-.5,-.5,-.5,0,1,.5,-.5,-.5,1,1,.5,-.5,.5,1,0,.5,-.5,.5,1,0,-.5,-.5,.5,0,0,-.5,-.5,-.5,0,1,-.5,.5,-.5,0,1,.5,.5,-.5,1,1,.5,.5,.5,1,0,.5,.5,.5,1,0,-.5,.5,.5,0,0,-.5,.5,-.5,0,1]),m.STATIC_DRAW),T=m.createBuffer(),m.bindBuffer(m.ELEMENT_ARRAY_BUFFER,T),m.bufferData(m.ELEMENT_ARRAY_BUFFER,A,m.STATIC_DRAW),console.log(m.getBufferParameter(m.ARRAY_BUFFER,m.BUFFER_SIZE)),console.log(m.getBufferParameter(m.ELEMENT_ARRAY_BUFFER,m.BUFFER_SIZE)),m.vertexAttribPointer(0,3,m.FLOAT,!1,20,0),m.enableVertexAttribArray(0),m.vertexAttribPointer(1,2,m.FLOAT,!1,20,12),m.enableVertexAttribArray(1),b=m.createTexture(),m.bindTexture(m.TEXTURE_2D,b),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_S,m.REPEAT),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_WRAP_T,m.REPEAT),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MIN_FILTER,m.LINEAR_MIPMAP_LINEAR),m.texParameteri(m.TEXTURE_2D,m.TEXTURE_MAG_FILTER,m.LINEAR);var x=m.TEXTURE_2D,F=m.RGBA,L=m.RGBA,N=m.UNSIGNED_BYTE;m.texImage2D(x,0,F,L,N,t),m.generateMipmap(m.TEXTURE_2D),m.enable(m.DEPTH_TEST),this.render()},e.prototype.render=function(){var t=Date.now();X=t-O,O=t,this.processInput(),e.resizeCanvasToDisplaySize(v),m.viewport(0,0,m.canvas.width,m.canvas.height),m.clear(m.COLOR_BUFFER_BIT|m.DEPTH_BUFFER_BIT),m.clearColor(0,0,0,1),m.useProgram(_),m.bindTexture(m.TEXTURE_2D,b),m.bindVertexArray(E),y=g(y,y,u(-.5),h(1,1,.5));var r=h(0,0,0);!function(e,t,r){e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2]}(r,R,P),l(w,R,r,S);var n=m.getUniformLocation(_,"model"),i=m.getUniformLocation(_,"view"),a=m.getUniformLocation(_,"projection");m.uniformMatrix4fv(n,!1,y),m.uniformMatrix4fv(i,!1,w),m.uniformMatrix4fv(a,!1,M),m.TRIANGLES,m.UNSIGNED_SHORT,m.drawArrays(m.TRIANGLES,0,36)},e.createShader=function(e,t,r){var n=e.createShader(t);if(e.shaderSource(n,r),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS))return console.log(e.getShaderInfoLog(n)),n;console.log(e.getShaderInfoLog(n)),e.deleteShader(n)},e.createProgram=function(e,t,r){var n=e.createProgram();if(e.attachShader(n,t),e.attachShader(n,r),e.linkProgram(n),e.getProgramParameter(n,e.LINK_STATUS))return n;console.log(e.getProgramInfoLog(n)),e.deleteProgram(n)},e.resizeCanvasToDisplaySize=function(e){var t=e.clientWidth,r=e.clientHeight;(e.width!==t||e.height!==r)&&(e.width=t,e.height=r)},e.prototype.processInput=function(){var e=.005*X;k&&p(R,R,P,e),Y&&(f(I,P,S),p(R,R,I,-e)),G&&p(R,R,P,-e),H&&(f(I,P,S),p(R,R,I,e))},e}();var W,j;function V(e){C&&(W=e[0],j=e[1],C=!1);var t=e[0]-W,r=j-e[1];W=e[0],j=e[1],N+=t*=.1;var n=u(D=(D=(D+=r*=.1)>89?89:D)<-89?-89:D),i=u(N),a=h(Math.cos(i)*Math.cos(n),Math.sin(n),Math.sin(i)*Math.cos(n));!function(e,t){var r=t[0],n=t[1],i=t[2],a=r*r+n*n+i*i;a>0&&(a=1/Math.sqrt(a)),e[0]=t[0]*a,e[1]=t[1]*a,e[2]=t[2]*a}(P,a)}const q=function(){function e(e,t){this.targetElement=e,this.renderer=t,this.messageBus=n.getInstance()}return e.prototype.receiveMessage=function(e){},e.prototype.update=function(){},e.prototype.initInputEvents=function(){var e=this;this.targetElement.tabIndex=1e3,this.targetElement.onkeydown=function(t){if(!t.repeat){var n=t.key;e.messageBus.post(new r(U,e,n))}},this.targetElement.onkeyup=function(t){if(!t.repeat){var n=t.key;e.messageBus.post(new r(B,e,n))}},this.targetElement.onmousedown=function(t){console.log("X:"+t.pageX+" Y:"+t.pageY),e.messageBus.post(new r(x,e,[t.pageX,t.pageY]))},this.targetElement.onmouseup=function(t){console.log("X:"+t.pageX+" Y:"+t.pageY),e.messageBus.post(new r(F,e,[t.pageX,t.pageY]))},this.targetElement.onmousemove=function(t){e.messageBus.post(new r(L,e,[t.pageX,t.pageY]))}},e.prototype.requestPointerLock=function(){this.targetElement.requestPointerLock()},e.prototype.exitPointerLock=function(){document.exitPointerLock()},e}();var Q=function(){function e(e){if(void 0===e&&(e="vertigoCanvas"),this._render=!1,this._canvas=document.getElementById(e),void 0===this._canvas)throw new Error("FATAL: Cannot find destination canvas element with name:"+e)}return e.prototype.receiveMessage=function(e){console.log("engine received "+e.identifier),this._render=!0},e.prototype.initialize=function(){this._messageBus=n.getInstance(),this._messageBus.addSubscription("renderer_started",this),this._renderer=new z(this._canvas),new q(this._canvas,this._renderer).initInputEvents(),this.run()},e.sendInputMessage=function(e){},e.prototype.run=function(){var e=this,t=function(){e._messageBus.update(),e._render&&e._renderer.render(),window.requestAnimationFrame(t)};window.requestAnimationFrame(t)},e}();window.onload=function(){(new Q).initialize()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,